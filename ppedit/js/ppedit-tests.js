// Generated by CoffeeScript 1.6.3
(function() {
  var moveBox, ppeditDescribe, ppeditMatchers;

  ppeditMatchers = {
    /*
    Returns True if the expected position equals
    the passed position
    */

    toBeEqualToPosition: function(expected) {
      return expected.top === this.actual.top && expected.left === this.actual.left;
    }
  };

  /*
  Simulates moving the passed box
  by the specified distance amount
  */


  moveBox = function(boxSelector, distance) {
    var previousPosition;
    previousPosition = {
      left: boxSelector.offset().left + boxSelector.scrollLeft(),
      top: boxSelector.offset().top + boxSelector.scrollTop()
    };
    boxSelector.simulate("mousedown", {
      clientX: previousPosition.left + 1,
      clientY: previousPosition.top + 1
    }).simulate("mousemove", {
      clientX: previousPosition.left + 1,
      clientY: previousPosition.top + 1
    }).simulate("mousemove", {
      clientX: previousPosition.left + 1 + distance.dx,
      clientY: previousPosition.top + 1 + distance.dy
    }).simulate("mouseup", {
      clientX: previousPosition.left + distance.dx,
      clientY: previousPosition.top + distance.dy
    });
    return expect(boxSelector.offset()).toBeEqualToPosition({
      left: previousPosition.left + distance.dx,
      top: previousPosition.top + distance.dy
    });
  };

  ppeditDescribe = function(suitDescription, specDefinitions) {
    return describe('', function() {
      beforeEach(function() {
        this.addMatchers(ppeditMatchers);
        return $(".editor").ppedit();
      });
      afterEach(function() {
        return $('.editor').children().remove();
      });
      return describe(suitDescription, specDefinitions);
    });
  };

  ppeditDescribe("A ppedit Jasmine test template", function() {
    return it("contains spec with an expectation", function() {
      return expect(true).toBe(true);
    });
  });

  ppeditDescribe("A test for issue CAP-47 : As a user, I want to select and move aggregated elements in my workspace", function() {
    return it("can select and move elements in the workspace", function() {
      var boxes;
      $(".addElementBtn").click();
      $(".addElementBtn").click();
      $(".addElementBtn").click();
      boxes = $('.ppedit-box');
      expect(boxes).toHaveLength(3);
      return moveBox(boxes.eq(0), {
        dx: 200,
        dy: 0
      });
    });
  });

  ppeditDescribe("A test for issue CAP-14 : As a user, I want to reposition elements visible on my work area", function() {
    it("adds a box on add element button click", function() {
      $(".addElementBtn").click();
      return expect($(".editor").find('.ppedit-box')).toHaveLength(1);
    });
    return it("does a box on add element button click", function() {
      $(".addElementBtn").click();
      return expect($(".editor").find('.ppedit-box')).toHaveLength(1);
    });
  });

}).call(this);
