// Generated by CoffeeScript 1.6.3
(function() {
  var addBox, enterText, moveBox, ppeditDescribe, ppeditMatchers, requestDelete, selectRectangle, simulateBoxClick, simulateBoxDblClick, viewPortPosition, waits;

  ppeditMatchers = {
    /*
    Returns True if the expected position equals
    the passed position
    */

    toBeEqualToPosition: function(expected) {
      return Math.round(expected.top) === Math.round(this.actual.top) && Math.round(expected.left) === Math.round(this.actual.left);
    }
  };

  ppeditDescribe = function(suitDescription, specDefinitions) {
    return describe('', function() {
      beforeEach(function() {
        this.addMatchers(ppeditMatchers);
        return $(".editor").ppedit();
      });
      afterEach(function() {
        return $('.editor').children().remove();
      });
      return describe(suitDescription, specDefinitions);
    });
  };

  /*
  Returns the position of the first element in the set of matched
  elements relative to the browser viewport.
  */


  viewPortPosition = function(jQuerySelector) {
    return {
      left: jQuerySelector.offset().left + jQuerySelector.scrollLeft(),
      top: jQuerySelector.offset().top + jQuerySelector.scrollTop()
    };
  };

  /*
  Adds a given number of boxes on an EMPTY box container
  */


  addBox = function(numOfBoxes) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = numOfBoxes - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      $(".addElementBtn").eq(0).simulate('click');
    }
    return expect($('.ppedit-box')).toHaveLength(numOfBoxes);
  };

  /*
  Simulates moving the passed box
  by the specified distance amount, then calls
  the callback once the operations is finished.
  */


  moveBox = function(boxSelector, distance, callback) {
    var previousPosition;
    previousPosition = viewPortPosition(boxSelector);
    boxSelector.simulate('mousedown', {
      clientX: previousPosition.left + 1,
      clientY: previousPosition.top + 1
    }).simulate("mousemove", {
      clientX: previousPosition.left + 1,
      clientY: previousPosition.top + 1
    }).simulate("mousemove", {
      clientX: previousPosition.left + distance.dx + 1,
      clientY: previousPosition.top + distance.dy + 1
    }).simulate('mouseup', {
      clientX: previousPosition.left + distance.dx + 1,
      clientY: previousPosition.top + distance.dy + 1
    });
    expect(viewPortPosition(boxSelector)).toBeEqualToPosition({
      left: previousPosition.left + distance.dx,
      top: previousPosition.top + distance.dy
    });
    return waits(300, function() {
      if (callback != null) {
        return callback();
      }
    });
  };

  /*
  Simulates a rectangular selection on the passed
  canvas with the parameter specified by the passed rect
  */


  selectRectangle = function(canvasSelector, rect) {
    return canvasSelector.simulate("mousedown", {
      clientX: rect.topLeft.left,
      clientY: rect.topLeft.top
    }).simulate("mousemove", {
      clientX: rect.topLeft.left,
      clientY: rect.topLeft.top
    }).simulate("mousemove", {
      clientX: rect.topLeft.left + rect.size.width,
      clientY: rect.topLeft.top + rect.size.height
    }).simulate("mouseup", {
      clientX: rect.topLeft.left + rect.size.width,
      clientY: rect.topLeft.top + rect.size.height
    });
  };

  /*
  Simulates entering the specified text into the passed box
  */


  enterText = function(box, text) {
    return simulateBoxDblClick(box, function() {
      expect(box).toBeFocused();
      return box.simulate("key-sequence", {
        sequence: text,
        callback: function() {
          return expect(box).toHaveHtml(text);
        }
      });
    });
  };

  /*
  Simulates ctrl/cmd + delete
  */


  requestDelete = function() {
    $('.ppedit-box-container').simulate('key-combo', {
      combo: 'ctrl+46'
    });
    return $('.ppedit-box-container').simulate('key-combo', {
      combo: 'meta+8'
    });
  };

  /*
  Simulates click on a box
  
    @param selector the selector matching a set of boxes
    @param callback the callback to be called after the click is performed
  */


  simulateBoxClick = function(selector, callback) {
    selector.simulate('mousedown');
    selector.simulate('mouseup');
    return waits(300, callback);
  };

  /*
  Simulates doubleclick on a box
  
    @param selector the selector matching a set of boxes
    @param callback the callback to be called after the doubleclick is performed
  */


  simulateBoxDblClick = function(selector, callback) {
    selector.simulate('mousedown');
    selector.simulate('mouseup');
    selector.simulate('mousedown');
    selector.simulate('mouseup');
    return waits(300, callback);
  };

  /*
  Executes the passed callback after waiting for
  the passed specified amount
  */


  waits = function(amount, callback) {
    var done;
    done = false;
    runs((function() {
      return setTimeout((function() {
        return done = true;
      }), amount);
    }));
    waitsFor((function() {
      return done;
    }), "The operation should run in under " + amount + " minutes.", amount + 500);
    return runs((function() {
      return callback();
    }));
  };

  ppeditDescribe("A ppedit Jasmine test template", function() {
    return it("contains spec with an expectation", function() {
      return expect(true).toBe(true);
    });
  });

  ppeditDescribe('A test for issue "CAP-49 : As a backend developer, I want an API from PPEdit that provides a changeset made on a particular resume so that I can persist it on the backend"', function() {
    var boxObjects;
    boxObjects = [
      {
        1234: '<div class="ppedit-box" tabindex="0" contenteditable="true" id="1234" style="left: 54px; top: 90px; width: 163px; height: 119px; font-family: \'Times New Roman\'; font-size: 100%; font-weight: normal; text-decoration: none; font-style: normal; z-index: 0; text-align: left; vertical-align: bottom;"></div>'
      }
    ];
    it("identifies boxes that were created then deleted during current editing as non existent", function() {
      addBox(1);
      return simulateBoxDblClick($('.ppedit-box'), function() {
        var result;
        requestDelete();
        result = JSON.parse($('.editor').ppedit('save'));
        expect(result.removed.length).toEqual(0);
        expect(result.created[0].length).toEqual(0);
        expect(result.created[1].length).toEqual(0);
        return expect(result.modified.length).toEqual(0);
      });
    });
    it("identifies two boxes newly created as saved when the saving API is called", function() {
      var result;
      addBox(2);
      result = JSON.parse($('.editor').ppedit('save'));
      expect(result.removed.length).toEqual(0);
      expect(result.created[0].length).toEqual(2);
      return expect(result.modified.length).toEqual(0);
    });
    it("identifies a new box as created when the saving API is called", function() {
      addBox(1);
      return simulateBoxDblClick($('.ppedit-box'), function() {
        var result;
        requestDelete();
        addBox(1);
        result = JSON.parse($('.editor').ppedit('save'));
        expect(result.removed.length).toEqual(0);
        expect(result.created[0].length).toEqual(1);
        return expect(result.modified.length).toEqual(0);
      });
    });
    it("generates a unique hash for each different hunk", function() {
      var result, result2;
      addBox(1);
      result = JSON.parse($('.editor').ppedit('save'));
      expect(result.etag).toBeDefined();
      expect(result.etag.length).toBeGreaterThan(5);
      $(".addElementBtn").click();
      result2 = JSON.parse($('.editor').ppedit('save'));
      console.log(JSON.stringify(result2, null, 4));
      return expect(result.etag).not.toEqual(result2.etag);
    });
    it("identifies a box which is first loaded and then deleted as removed", function() {
      $('.editor').ppedit('load', {
        hunks: JSON.stringify(boxObjects)
      });
      return simulateBoxDblClick($('.ppedit-box'), function() {
        var result;
        requestDelete();
        result = JSON.parse($('.editor').ppedit('save'));
        expect(result.removed.length).toEqual(1);
        expect(result.created[0].length).toEqual(0);
        expect(result.created[1].length).toEqual(0);
        return expect(result.modified.length).toEqual(0);
      });
    });
    return it("identifies a box which is first loaded and then moved as modified", function() {
      var result;
      $('.editor').ppedit('load', {
        hunks: JSON.stringify(boxObjects)
      });
      moveBox($('.ppedit-box'), {
        dx: 100,
        dy: 50
      });
      result = JSON.parse($('.editor').ppedit('save'));
      expect(result.removed.length).toEqual(0);
      expect(result.created[0].length).toEqual(0);
      expect(result.created[1].length).toEqual(0);
      return expect(result.modified.length).toEqual(1);
    });
  });

  ppeditDescribe('A test for issue "CAP-48 : As a user, I want to copy and paste aggregate elements in my work area"', function() {
    it("copies and past one box", function() {
      var box;
      addBox(1);
      box = $('.ppedit-box');
      return simulateBoxDblClick(box, function() {
        $('.ppedit-box-container').simulate("key-combo", {
          combo: "meta+shift+c"
        });
        $('.ppedit-box-container').simulate("key-combo", {
          combo: "meta+shift+v"
        });
        $('.ppedit-box-container').simulate("key-combo", {
          combo: "ctrl+shift+c"
        });
        $('.ppedit-box-container').simulate("key-combo", {
          combo: "ctrl+shift+v"
        });
        return expect($('.ppedit-box')).toHaveLength(2);
      });
    });
    it("copies and past multiple boxes", function() {
      var boxes, canvas;
      addBox(2);
      boxes = $('.ppedit-box');
      moveBox(boxes.eq(0), {
        dx: 200,
        dy: 0
      });
      canvas = $('.ppedit-canvas');
      selectRectangle(canvas, {
        topLeft: {
          left: viewPortPosition(canvas).left + 49,
          top: viewPortPosition(canvas).top + 49
        },
        size: {
          width: 500,
          height: 100
        }
      });
      $('.ppedit-box-container').simulate("key-combo", {
        combo: "meta+shift+c"
      });
      $('.ppedit-box-container').simulate("key-combo", {
        combo: "meta+shift+v"
      });
      $('.ppedit-box-container').simulate("key-combo", {
        combo: "ctrl+shift+c"
      });
      $('.ppedit-box-container').simulate("key-combo", {
        combo: "ctrl+shift+v"
      });
      return expect($('.ppedit-box')).toHaveLength(4);
    });
    return it("does not copy and past one box if not pressing the shift button", function() {
      var box;
      addBox(1);
      box = $('.ppedit-box');
      return simulateBoxDblClick(box, function() {
        $('.ppedit-box-container').simulate("key-combo", {
          combo: "meta+c"
        });
        $('.ppedit-box-container').simulate("key-combo", {
          combo: "meta+v"
        });
        $('.ppedit-box-container').simulate("key-combo", {
          combo: "ctrl+c"
        });
        $('.ppedit-box-container').simulate("key-combo", {
          combo: "ctrl+v"
        });
        return expect($('.ppedit-box')).toHaveLength(1);
      });
    });
  });

  ppeditDescribe("A test for issue CAP-47 : As a user, I want to select and move aggregated elements in my workspace", function() {
    return it("can select and move elements in the workspace", function() {
      var boxes;
      addBox(3);
      boxes = $('.ppedit-box');
      moveBox(boxes.eq(0), {
        dx: 200,
        dy: 0
      });
      return setTimeout((function() {
        var canvas;
        moveBox(boxes.eq(1), {
          dx: 0,
          dy: 200
        });
        canvas = $('.ppedit-canvas');
        selectRectangle(canvas, {
          topLeft: {
            left: viewPortPosition(canvas).left + 49,
            top: viewPortPosition(canvas).top + 49
          },
          size: {
            width: 500,
            height: 100
          }
        });
        return expect($('.ppedit-box-selected')).toHaveLength(2);
      }), 300);
    });
  });

  ppeditDescribe("A test for issue CAP-44 : As a user,  I want options to show or hide the grid, and snap or unsnap my elements in the work area.", function() {
    return it("adds a box on grid button click", function() {
      expect($(".ppedit-grid")).toHaveCss({
        display: "block"
      });
      $(".gridElementBtn").click();
      return expect($(".ppedit-grid")).toHaveCss({
        display: "none"
      });
    });
  });

  ppeditDescribe("A test for issue CAP-42 : As a user, I want to change the opacity of elements in my work area.", function() {
    return it("drag the slider button to change the box opacity", function() {});
  });

  ppeditDescribe('A test for issue CAP-40 : "As a user, I want my elements in my work area to snap to a predefined and adjustable grid system.', function() {
    return it("snap the position of box to closest sanpping point after moving the box", function() {
      var box;
      addBox(1);
      $('.snapBtn').simulate('click');
      box = $('.ppedit-box');
      box.simulate('mousedown', {
        clientX: box.position().left + 1,
        clientY: box.position().top + 1
      }).simulate("mousemove", {
        clientX: box.position().left + 1,
        clientY: box.position().top + 1
      }).simulate("mousemove", {
        clientX: box.position().left + 83,
        clientY: box.position().top + 83
      }).simulate('mouseup', {
        clientX: box.position().left + 83,
        clientY: box.position().top + 83
      });
      return expect(box.position()).toBeEqualToPosition({
        top: 128,
        left: 128
      });
    });
  });

  ppeditDescribe("A test for issue CAP-37 : As a user, I want to arrange the elements depth.", function() {
    return it("can change the index of the element row one above the table element", function() {
      var boxes,
        _this = this;
      addBox(3);
      boxes = $('.ppedit-box');
      expect(boxes).toHaveLength(3);
      return simulateBoxDblClick(boxes.eq(2), function() {
        $('.moveElementDownBtn').simulate('click');
        expect(boxes.eq(2)).toHaveCss({
          'z-index': '1'
        });
        return expect($('.ppedit-panel-row').eq(1)).toHaveAttr('ppedit-box-id', boxes.eq(2).attr('ppedit-box-id'));
      });
    });
  });

  ppeditDescribe("A test for issue CAP-35 : As a user,   I want to have horizontal and vertical alignment of my paragraphs.", function() {
    it("change to left alignment by click left alignment button on the panel", function() {
      var _this = this;
      addBox(1);
      return simulateBoxDblClick($('.ppedit-box'), function() {
        $('.leftAlignBtn').simulate('click');
        return expect($(".ppedit-box")).toHaveCss({
          'text-align': "left"
        });
      });
    });
    it("change to right alignment by click left alignment button on the panel", function() {
      var box, btn,
        _this = this;
      addBox(1);
      box = $('.ppedit-box');
      btn = $('.rightAlignBtn');
      return simulateBoxDblClick(box, function() {
        btn.simulate('click');
        return expect($(".ppedit-box")).toHaveCss({
          'text-align': "right"
        });
      });
    });
    return it("change to center alignment by click left alignment button on the panel", function() {
      var box, btn,
        _this = this;
      addBox(1);
      box = $('.ppedit-box');
      btn = $('.centerAlignBtn');
      return simulateBoxDblClick(box, function() {
        btn.simulate('click');
        return expect($(".ppedit-box")).toHaveCss({
          'text-align': "center"
        });
      });
    });
  });

  ppeditDescribe('A test for issue CAP-33 : "As a user, I want to create ordered and unordered bullet points in my work area."', function() {
    it("can inserts an ordered list inside an empty box", function() {
      var box,
        _this = this;
      addBox(1);
      box = $('.ppedit-box');
      return simulateBoxDblClick(box, function() {
        $('.orderedPointBtn').simulate('click');
        return expect(box).toHaveHtml('<ol><li></li></ol>');
      });
    });
    it("can inserts an unordered list inside an empty box", function() {
      var box,
        _this = this;
      addBox(1);
      box = $('.ppedit-box');
      return simulateBoxDblClick(box, function() {
        $('.bulletPointBtn').simulate('click');
        return expect(box).toHaveHtml('<ul><li></li></ul>');
      });
    });
    it("can inserts an ordered list that wraps an existing text inside a box", function() {
      var box,
        _this = this;
      addBox(1);
      box = $('.ppedit-box');
      return simulateBoxDblClick(box, function() {
        return box.simulate("key-sequence", {
          sequence: "Lorem ipsum dolor sin amet",
          callback: function() {
            $('.orderedPointBtn').simulate('click');
            return expect(box).toContainHtml('<ol><li>Lorem ipsum dolor sin amet</li></ol>');
          }
        });
      });
    });
    return it("can inserts an unordered list that wraps an existing text inside a box", function() {
      var box,
        _this = this;
      addBox(1);
      box = $('.ppedit-box');
      return simulateBoxDblClick(box, function() {
        return box.simulate("key-sequence", {
          sequence: "Lorem ipsum dolor sin amet",
          callback: function() {
            $('.bulletPointBtn').simulate('click');
            return expect(box).toContainHtml('<ul><li>Lorem ipsum dolor sin amet</li></ul>');
          }
        });
      });
    });
  });

  ppeditDescribe("A test for issue CAP-25 : As a user, I want to name my document, so that I can distinguish between my documents", function() {
    return it("can input text inside the textarea to name document", function() {
      $('.addElementBtn').val('documentName');
      return expect($('.addElementBtn')).toHaveValue('documentName');
    });
  });

  ppeditDescribe("A test for issue CAP-20 : As a user, I want to clean my work area, so that I can start on a fresh new page, but I want to be able to remedy in the case of a mistake.", function() {
    return it(" remove boxes when delete element button click", function() {
      $(".removeElementBtn").click();
      return expect($(".editor").find('.ppedit-box')).toHaveLength(0);
    });
  });

  ppeditDescribe("A test for issue CAP-15 : As a user, I want to resize the bounding box of elements on my work area", function() {
    return it("can resize a box with the mouse", function() {
      return addBox(1);
    });
  });

  ppeditDescribe("A test for issue CAP-14 : As a user, I want to reposition elements visible on my work area", function() {
    it("adds a box when clicking the add element button once", function() {
      return addBox(1);
    });
    it("adds multiples boxes when clicking the add element button multiple times", function() {
      return addBox(10);
    });
    it("adds a box when doubleclicking the container", function() {
      $('.ppedit-box-container').eq(0).simulate('dblclick');
      return expect($('.ppedit-box')).toHaveLength(1);
    });
    it("adds 2 boxes when doubleclicking the container twice", function() {
      $('.ppedit-box-container').eq(0).simulate('dblclick');
      $('.ppedit-box-container').eq(0).simulate('dblclick');
      return expect($('.ppedit-box')).toHaveLength(2);
    });
    it("repositions elements with the mouse", function() {
      addBox(2);
      return moveBox($('.ppedit-box').eq(0), {
        dx: 150,
        dy: 180
      }, function() {
        return moveBox($('.ppedit-box').eq(1), {
          dx: 100,
          dy: 100
        });
      });
    });
    return it("deletes a box when clicking on ctrl+delete", function() {
      addBox(1);
      return simulateBoxDblClick($('.ppedit-box'), function() {
        requestDelete();
        return expect($('.ppedit-box')).toHaveLength(0);
      });
    });
  });

  ppeditDescribe('A test for issue CAP-132 : "Add a load content API on PPedit"', function() {
    var boxObjects, singleBoxObject;
    singleBoxObject = [
      {
        1234: '<div class="ppedit-box" tabindex="0" contenteditable="true" id="1234" style="left: 54px; top: 90px; width: 163px; height: 119px; font-family: \'Times New Roman\'; font-size: 100%; font-weight: normal; text-decoration: none; font-style: normal; z-index: 0; text-align: left; vertical-align: bottom;"></div>'
      }
    ];
    boxObjects = [
      {
        1383319360353: '<div class="ppedit-box" tabindex="0" contenteditable="true" id="1383319360353" style="left: 54px; top: 90px; width: 163px; height: 119px; font-family: \'Times New Roman\'; font-size: 100%; font-weight: normal; text-decoration: none; font-style: normal; z-index: 0; text-align: left; vertical-align: bottom;"><div>Hello world.</div></div>',
        1383319393238: '<div class="ppedit-box" tabindex="0" contenteditable="true" id="1383319393238" style="left: 852px; top: 83px; width: 125px; height: 50px; font-family: \'Times New Roman\'; font-size: 100%; font-weight: bold; text-decoration: none; font-style: normal; z-index: 1; text-align: left; vertical-align: bottom;">This is a bold text at the right of the page</div>'
      }, {
        1383319427231: '<div class="ppedit-box" tabindex="0" contenteditable="true" id="1383319427231" style="left: 294px; top: 233px; width: 202px; height: 50px; font-family: \'Times New Roman\'; font-size: 100%; font-weight: normal; text-decoration: underline; font-style: italic; z-index: 2; text-align: left; vertical-align: bottom;">This is a Italic and underline text</div>',
        1383319782815: '<div class="ppedit-box" tabindex="0" contenteditable="true" id="1383319782815" style="left: 56px; top: 350px; width: 199px; height: 64px; font-family: \'Times New Roman\'; font-size: 100%; font-weight: normal; text-decoration: none; font-style: normal; z-index: 3; text-align: center; vertical-align: bottom;">This is a center-aligned text</div>'
      }
    ];
    it("can load 1 box", function() {
      expect($('.ppedit-box')).toHaveLength(0);
      $('.editor').ppedit('load', {
        hunks: JSON.stringify(singleBoxObject)
      });
      return expect($('.ppedit-box')).toHaveLength(1);
    });
    it("can move a loaded box around", function() {
      var box;
      $('.editor').ppedit('load', {
        hunks: JSON.stringify(singleBoxObject)
      });
      box = $('.ppedit-box');
      return moveBox(box, {
        dx: 200,
        dy: 0
      });
    });
    it("can enter content on a loaded box", function() {
      var box;
      $('.editor').ppedit('load', {
        hunks: JSON.stringify(singleBoxObject)
      });
      box = $('.ppedit-box');
      return enterText(box, "Lorem ipsum dolor sin amet");
    });
    it("does not remove the box when requesting undo right after loading it.", function() {
      $('.editor').ppedit('load', {
        hunks: JSON.stringify(singleBoxObject)
      });
      $('.ppedit-box-container').simulate("key-combo", {
        combo: "meta+z"
      });
      $('.ppedit-box-container').simulate("key-combo", {
        combo: "ctrl+z"
      });
      return expect($('.ppedit-box')).toHaveLength(1);
    });
    return it("can load 4 boxes with some contents in each", function() {
      $('.editor').ppedit('load', {
        hunks: JSON.stringify(boxObjects)
      });
      expect($('.ppedit-box')).toHaveLength(4);
      return expect($('.ppedit-box-container')).toContainHtml(boxObjects['1383319393238']);
    });
  });

  ppeditDescribe("A test for issue CAP-13 : As a user,   I want to change font settings of my text documents.", function() {
    it("change font family on select font family on the panel", function() {
      var box,
        _this = this;
      addBox(1);
      box = $('.ppedit-box');
      return simulateBoxDblClick(box, function() {
        $('.fontTypeBtn').val('Glyphicons Halflings').change();
        return expect($(".ppedit-box")).toHaveCss({
          'font-family': "'Glyphicons Halflings'"
        });
      });
    });
    it("change font size on select font size on the panel", function() {
      var box,
        _this = this;
      addBox(1);
      box = $('.ppedit-box');
      return simulateBoxDblClick(box, function() {
        $('.fontSizeBtn').val('12').change();
        return expect(Math.round(parseInt(box.css('font-size')))).toEqual(16);
      });
    });
    it("change font weight on font bold on the panel", function() {
      var box,
        _this = this;
      addBox(1);
      box = $('.ppedit-box');
      return simulateBoxDblClick(box, function() {
        $('.weightBtn').simulate('click');
        return expect($(".ppedit-box").css('font-weight')).toEqual('bold');
      });
    });
    it("change font underline on font underline on the panel", function() {
      var box,
        _this = this;
      addBox(1);
      box = $('.ppedit-box');
      return simulateBoxDblClick(box, function() {
        $('.underlineBtn').simulate('click');
        return expect(box.css('text-decoration')).toMatch(/underline/);
      });
    });
    return it("change font italic on font italic on the panel", function() {
      var box,
        _this = this;
      addBox(1);
      box = $('.ppedit-box');
      return simulateBoxDblClick(box, function() {
        $('.italicBtn').simulate('click');
        return expect($(".ppedit-box").css('font-style')).toEqual('italic');
      });
    });
  });

  ppeditDescribe('A test for issue CAP-118 : "Moving a box containing new lines moves it too far away" bug.', function() {
    return it("can move a box containing a new line by the right amount", function() {
      var box;
      addBox(1);
      box = $('.ppedit-box').html("<br/><br/>");
      return moveBox(box, {
        dx: 0,
        dy: 200
      });
    });
  });

  ppeditDescribe('A test for issue CAP-116 : "Cannot Undo Box moved" bug.', function() {
    return it("can undo a box move command", function() {
      var box;
      addBox(1);
      box = $('.ppedit-box');
      moveBox(box, {
        dx: 0,
        dy: 200
      });
      $('.ppedit-box-container').eq(0).simulate("key-combo", {
        combo: "meta+z"
      });
      $('.ppedit-box-container').eq(0).simulate("key-combo", {
        combo: "ctrl+z"
      });
      expect($('.ppedit-box')).toHaveLength(1);
      return expect(box.position()).toBeEqualToPosition({
        top: 50,
        left: 50
      });
    });
  });

  ppeditDescribe("A test for issue CAP-114 : As a user, I want to be able to enter text inside an element", function() {
    return it("can enter text inside a Box", function() {
      var box;
      addBox(1);
      box = $('.ppedit-box');
      return enterText(box, "Lorem ipsum dolor sin amet");
    });
  });

}).call(this);
