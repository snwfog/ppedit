// Generated by CoffeeScript 1.6.3
(function() {
  var Box, BoxHelper, BoxesContainer, Canvas, ChangeBoxContentCommand, ChangeBoxOpacityCommand, ChangeDepthCommand, ChangeStyleCommand, Clipboard, Command, CommandFactory, CommandManager, ControllerFactory, CopyBoxesCommand, CreateBoxesCommand, EditArea, FontPanel, Geometry, Graphic, Grid, KeyCodes, LoadBoxesCommand, MacController, MainPanel, MoveBoxCommand, PCController, PPEditor, Panel, RemoveBoxesCommand,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Command = (function() {
    function Command() {
      this.boxIds = [];
    }

    Command.prototype.undo = function() {};

    Command.prototype.execute = function() {};

    Command.prototype.getType = function() {};

    Command.prototype.getPageNum = function() {};

    return Command;

  })();

  /*
  Abstract Class, represents an Dom node
  */


  Graphic = (function() {
    /*
    Create a new graphic using the passed jQuery selector matching
    the element this dom node will be appended to.
    */

    function Graphic(root) {
      this.root = root;
      this.element = void 0;
    }

    /*
    Creates the element node and append it
    to the passed root
    */


    Graphic.prototype.buildElement = function() {};

    /*
    Method called after the element has been appended
    to the DOM.
    */


    Graphic.prototype.bindEvents = function() {};

    return Graphic;

  })();

  /*
  Helper class implementing geometry-related logic.
  */


  Geometry = (function() {
    function Geometry() {}

    /*
    Returns true if the innerRect Rectangle is fully
    contained within the outerRect Rectangle, false otherwise.
    */


    Geometry.rectContainsRect = function(outerRect, innerRect) {
      return innerRect.topLeft.left >= outerRect.topLeft.left && innerRect.topLeft.top >= outerRect.topLeft.top && innerRect.topLeft.left + innerRect.size.width <= outerRect.topLeft.left + outerRect.size.width && innerRect.topLeft.top + innerRect.size.height <= outerRect.topLeft.top + outerRect.size.height;
    };

    /*
    Returns true if the passed point is contained
     within the passed rectangle, false otherwise.
    */


    Geometry.rectContainsPoint = function(rect, point) {
      return point.left >= rect.topLeft.left && point.top >= rect.topLeft.top && point.left <= rect.topLeft.left + rect.size.width && point.top <= rect.topLeft.top + rect.size.height;
    };

    /*
    Returns true if the passed points have the
    same coordinate, false otherwise.
    */


    Geometry.pointEqualToPoint = function(point1, point2) {
      return point1.left === point2.left && point1.top === point2.top;
    };

    return Geometry;

  })();

  /*
  Helper Class that provides static constants to keyboard keycodes.
  */


  KeyCodes = (function() {
    function KeyCodes() {}

    KeyCodes.C = 67;

    KeyCodes.V = 86;

    KeyCodes.Z = 90;

    KeyCodes.Y = 89;

    KeyCodes.DELETE = 46;

    KeyCodes.SHIFT = 16;

    KeyCodes.MAC_CMD_LEFT = 91;

    KeyCodes.MAC_CMD_RIGHT = 93;

    KeyCodes.MAC_DELETE = 8;

    return KeyCodes;

  })();

  /*
  Keyboard Mapping Controller for clients running on Windows.
  */


  PCController = (function() {
    function PCController(root) {
      this.root = root;
    }

    PCController.prototype.bindEvents = function() {
      var _this = this;
      return this.root.keydown(function(event) {
        if (event.keyCode === KeyCodes.Z && event.ctrlKey) {
          event.preventDefault();
          _this.root.trigger('requestUndo');
        }
        if (event.keyCode === KeyCodes.Y && event.ctrlKey) {
          event.preventDefault();
          _this.root.trigger('requestRedo');
        }
        if (event.keyCode === KeyCodes.DELETE || (event.keyCode === KeyCodes.DELETE && event.ctrlKey)) {
          event.preventDefault();
          _this.root.trigger('requestDelete');
        }
        if (event.keyCode === KeyCodes.C && event.ctrlKey && event.shiftKey) {
          event.preventDefault();
          _this.root.trigger('requestCopy');
        }
        if (event.keyCode === KeyCodes.V && event.ctrlKey && event.shiftKey) {
          event.preventDefault();
          return _this.root.trigger('requestPaste');
        }
      });
    };

    return PCController;

  })();

  /*
  Keyboard Mapping Controller for clients running on Mac
  */


  MacController = (function() {
    function MacController(root) {
      this.root = root;
      this.leftCmdKeyPressed = false;
      this.rightCmdKeyPressed = false;
    }

    MacController.prototype.bindEvents = function() {
      var _this = this;
      return this.root.keydown(function(event) {
        if (event.keyCode === KeyCodes.MAC_CMD_LEFT) {
          return _this.leftCmdKeyPressed = true;
        } else if (event.keyCode === KeyCodes.Z && _this._cmdKeyIsPressed()) {
          event.preventDefault();
          return _this.root.trigger('requestUndo');
        } else if (event.keyCode === KeyCodes.Y && _this._cmdKeyIsPressed()) {
          event.preventDefault();
          return _this.root.trigger('requestRedo');
        } else if (event.keyCode === KeyCodes.MAC_DELETE && _this._cmdKeyIsPressed()) {
          event.preventDefault();
          return _this.root.trigger('requestDelete');
        } else if (event.keyCode === KeyCodes.C && _this._cmdKeyIsPressed() && event.shiftKey) {
          event.preventDefault();
          return _this.root.trigger('requestCopy');
        } else if (event.keyCode === KeyCodes.V && _this._cmdKeyIsPressed() && event.shiftKey) {
          event.preventDefault();
          return _this.root.trigger('requestPaste');
        }
      }).keyup(function(event) {
        if (event.keyCode === KeyCodes.MAC_CMD_LEFT) {
          _this.leftCmdKeyPressed = false;
        }
        if (event.keyCode === KeyCodes.MAC_CMD_RIGHT) {
          _this.rightCmdKeyPressed = false;
        }
        if (event.keyCode === KeyCodes.SHIFT) {
          return _this.shiftKeyPressed = false;
        }
      });
    };

    MacController.prototype._cmdKeyIsPressed = function() {
      return this.rightCmdKeyPressed || this.leftCmdKeyPressed;
    };

    return MacController;

  })();

  /*
  the ControllerFactory determines which controller
  to used based on the user's Operating System.
  */


  ControllerFactory = (function() {
    function ControllerFactory() {}

    ControllerFactory.getController = function(root) {
      if (navigator.userAgent.match(/Macintosh/) !== null) {
        return new MacController(root);
      } else {
        return new PCController(root);
      }
    };

    return ControllerFactory;

  })();

  /*
  This class is used to trigger graphicContentChanged Events
  for a particular box. This event is fired whenever
  the html of the corresponding graphic has changed
  */


  BoxHelper = (function() {
    function BoxHelper(graphic) {
      this.graphic = graphic;
      this.controller = void 0;
      this.content = void 0;
    }

    BoxHelper.prototype.bindEvents = function() {
      var _this = this;
      this.controller = ControllerFactory.getController(this.graphic.element);
      this.graphic.element.on('requestUndo', function(event) {
        _this._checkNewContent(false);
        return event.stopPropagation();
      }).focus(function(event) {
        return _this._checkNewContent(true);
      }).blur(function(event) {
        return _this._checkNewContent(true);
      });
      return this.controller.bindEvents();
    };

    /*
    Checks that the content of the graphic has changed and if it did,
    fire the graphicContentChanged event.
    if saveNewContent is true, the content new content will be saved
    for the next time this function will be called.
    */


    BoxHelper.prototype._checkNewContent = function(saveNewContent) {
      var graphicHtml;
      graphicHtml = this.graphic.element.html();
      if ((this.content != null) && this.content !== graphicHtml) {
        this.graphic.element.trigger('graphicContentChanged', [
          {
            graphic: this.graphic,
            prevContent: this.content,
            newContent: graphicHtml
          }
        ]);
      }
      return this.content = saveNewContent ? graphicHtml : void 0;
    };

    return BoxHelper;

  })();

  Box = (function(_super) {
    __extends(Box, _super);

    Box.CLICK_TIME_MILLIS = 200;

    Box.DBLCLICK_TIME_MILLIS = 200;

    function Box(root, options) {
      this.root = root;
      this.options = options;
      Box.__super__.constructor.call(this, this.root);
      this.helper = new BoxHelper(this);
      this.prevPosition = void 0;
      this.prevMouseDownTime = 0;
      this.clickCount = 0;
      this.prevMouseUpTime = 0;
      this.clickTimeoutId = 0;
    }

    Box.prototype.buildElement = function() {
      var boxs, highestZIndex, settings;
      highestZIndex = void 0;
      boxs = this.root.find('.ppedit-box');
      if (boxs.length > 0) {
        highestZIndex = 0;
        boxs.each(function(index, nodeElement) {
          return highestZIndex = Math.max(highestZIndex, parseInt($(nodeElement).css('z-index')));
        });
      }
      settings = $.extend({
        left: '50px',
        top: '50px',
        width: '75px',
        height: '50px',
        color: 'black',
        'font-family': 'Times New Roman',
        'font-size': '12pt',
        'font-weight': 'normal',
        'text-decoration': 'none',
        'font-style': 'normal',
        'z-index': highestZIndex != null ? highestZIndex + 1 : 0,
        'text-align': 'left',
        'vertical-align': 'bottom'
      }, this.options);
      return this.element = $('<div></div>').addClass('ppedit-box').attr('contenteditable', true).attr('id', $.now()).css(settings);
    };

    Box.prototype.bindEvents = function() {
      var _this = this;
      this.element.mousedown(function(event) {
        event.stopPropagation();
        event.preventDefault();
        _this.select();
        return _this.prevMouseDownTime = event.timeStamp;
      }).mouseup(function(event) {
        event.preventDefault();
        if (event.timeStamp - _this.prevMouseDownTime < Box.CLICK_TIME_MILLIS) {
          _this.clickCount++;
          if (_this.clickTimeoutId === 0) {
            _this.clickTimeoutId = setTimeout((function() {
              if (_this.clickCount === 1) {
                _this._onClick();
              } else if (_this.clickCount >= 2) {
                _this._onDoubleClick();
              }
              _this.clickTimeoutId = 0;
              return _this.clickCount = 0;
            }), Box.DBLCLICK_TIME_MILLIS);
          }
        }
        return _this.stopMoving();
      }).click(function(event) {
        event.stopPropagation();
        return event.preventDefault();
      }).dblclick(function(event) {
        event.stopPropagation();
        return event.preventDefault();
      }).focus(function(event) {
        return _this.element.trigger('boxSelected', [_this]);
      }).on('containerMouseMove', function(event, mouseMoveEvent, delta) {
        if (event.target === _this.element.get(0)) {
          if (_this.element.hasClass('ppedit-box-selected') && (delta != null)) {
            return _this.move(delta.x, delta.y);
          }
        }
      }).on('containerMouseLeave', function() {
        return _this.stopMoving();
      }).on('containerMouseUp', function(event, mouseMoveEvent) {
        return _this.stopMoving();
      }).on('containerKeyDown', function(event, keyDownEvent) {
        if (_this.element.hasClass('ppedit-box-selected')) {
          return _this._processKeyDownEvent(keyDownEvent);
        }
      }).keydown(function(event) {
        if (!_this.isFocused()) {
          return _this._processKeyDownEvent(event);
        }
      });
      return this.helper.bindEvents();
    };

    /*
    Matches directional arrows event
    to pixel-by-pixel movement
    */


    Box.prototype._processKeyDownEvent = function(event) {
      var moved, previousPosition;
      previousPosition = this.currentPosition();
      moved = false;
      if (event.which === 37) {
        event.preventDefault();
        moved = true;
        this.move(-1, 0);
      }
      if (event.which === 38) {
        event.preventDefault();
        moved = true;
        this.move(0, -1);
      }
      if (event.which === 39) {
        event.preventDefault();
        moved = true;
        this.move(1, 0);
      }
      if (event.which === 40) {
        event.preventDefault();
        moved = true;
        this.move(0, 1);
      }
      if (moved) {
        return this.element.trigger('boxMoved', [this, this.currentPosition(), previousPosition]);
      }
    };

    /*
    Deselects the box
    */


    Box.prototype.stopMoving = function() {
      this.element.removeClass('ppedit-box-selected');
      if ((this.prevPosition != null) && !Geometry.pointEqualToPoint(this.currentPosition(), this.prevPosition)) {
        if ($(document).find('.snapBtn').hasClass('snapBtn-selected')) {
          this.snap();
        }
        this.root.trigger('boxMoved', [this, $.extend(true, {}, this.currentPosition()), $.extend(true, {}, this.prevPosition)]);
      }
      this.prevPosition = void 0;
      if ($(document).find('.snapBtn').hasClass('snapBtn-selected')) {
        this.root.find('.hDotLine').removeClass('ppedit-hDotLine');
        return this.root.find('.vDotLine').removeClass('ppedit-vDotLine');
      }
    };

    /*
    Moves the box by the passed delta amounts.
    */


    Box.prototype.move = function(deltaX, deltaY) {
      var currentPos, dotLinePos;
      currentPos = this.currentPosition();
      this.setPosition(deltaX + currentPos.left, deltaY + currentPos.top);
      dotLinePos = this.getSnapPosition(this.currentPosition());
      if ($(document).find('.snapBtn').hasClass('snapBtn-selected')) {
        this.root.find('.hDotLine').addClass('ppedit-hDotLine').css('top', dotLinePos.top);
        return this.root.find('.vDotLine').addClass('ppedit-vDotLine').css('left', dotLinePos.left);
      }
    };

    /*
    Sets the position of the box to the passed coordinates
    */


    Box.prototype.setPosition = function(x, y) {
      this.element.css('left', x + 'px');
      return this.element.css('top', y + 'px');
    };

    /*
    Returns the current position of the box.
    */


    Box.prototype.currentPosition = function() {
      return this.element.position();
    };

    /*
    Sets the position of the box to the nearest snapping
    position.
    */


    Box.prototype.snap = function() {
      var snappedPosition;
      snappedPosition = this.getSnapPosition(this.currentPosition());
      return this.setPosition(snappedPosition.left, snappedPosition.top);
    };

    /*
    Returns the coordinates of the snapping position nearest
    to the box.
    */


    Box.prototype.getSnapPosition = function(p) {
      var snapedLeft, snapedTop;
      snapedLeft = parseInt(p.left / 8) * 8;
      snapedTop = parseInt(p.top / 8) * 8;
      return {
        left: snapedLeft,
        top: snapedTop
      };
    };

    /*
    Marks the box as selected
    */


    Box.prototype.select = function() {
      this.element.addClass('ppedit-box-selected');
      return this.prevPosition = this.currentPosition();
    };

    /*
    Returns true if the element is currently focused, false otherwise
    */


    Box.prototype.isFocused = function() {
      return this.element.get(0) === document.activeElement;
    };

    /*
    Puts the box on focus.
    */


    Box.prototype._enableFocus = function() {
      this.root.find('.ppedit-box').removeClass('ppedit-box-focus').removeClass('ppedit-box-selected');
      return this.element.addClass('ppedit-box-focus').focus();
    };

    /*
    Adds an unordered point list at the current position
    of the cursor in the box
    */


    Box.prototype.addBulletPoint = function() {
      return this._addHtml($('<ul><li></li></ul>'));
    };

    /*
    Adds an ordered list at the current position
    of the cursor in the box
    */


    Box.prototype.addOrderedPointList = function() {
      return this._addHtml($('<ol><li></li></ol>'));
    };

    Box.prototype._addHtml = function(htmlSelector) {
      var editedElement;
      editedElement = $(window.getSelection().getRangeAt(0).startContainer.parentNode);
      if (editedElement.closest('.ppedit-box').length === 0) {
        editedElement = this.element;
      }
      htmlSelector.find('li').html(editedElement.html());
      return editedElement.empty().append(htmlSelector);
    };

    Box.prototype._getCursorPosition = function() {
      return window.getSelection().getRangeAt(0).startOffset;
    };

    Box.prototype._onClick = function() {};

    Box.prototype._onDoubleClick = function() {
      return this._enableFocus();
    };

    return Box;

  })(Graphic);

  RemoveBoxesCommand = (function(_super) {
    __extends(RemoveBoxesCommand, _super);

    function RemoveBoxesCommand(editor, pageNum, boxesSelector) {
      var box, boxArray;
      this.editor = editor;
      this.pageNum = pageNum;
      RemoveBoxesCommand.__super__.constructor.call(this);
      boxArray = boxesSelector.toArray();
      this.boxIds = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = boxArray.length; _i < _len; _i++) {
          box = boxArray[_i];
          _results.push(box.id);
        }
        return _results;
      })();
      this.boxes = this.editor.areas[this.pageNum].boxesContainer.getBoxesFromIds(this.boxIds);
    }

    RemoveBoxesCommand.prototype.execute = function() {
      var boxId, _i, _len, _ref, _results;
      this.editor.areas[this.pageNum].boxesContainer.removeBoxes(this.boxIds);
      _ref = this.boxIds;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        boxId = _ref[_i];
        _results.push(this.editor.panels[this.pageNum].removeBoxRow(boxId));
      }
      return _results;
    };

    RemoveBoxesCommand.prototype.undo = function() {
      var box, _i, _len, _ref, _results;
      _ref = this.boxes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        this.editor.areas[this.pageNum].boxesContainer.addBox(box);
        _results.push(this.editor.panel[this.pageNum].addBoxRow(box.element.attr('id')));
      }
      return _results;
    };

    RemoveBoxesCommand.prototype.getType = function() {
      return 'Remove';
    };

    return RemoveBoxesCommand;

  })(Command);

  MoveBoxCommand = (function(_super) {
    __extends(MoveBoxCommand, _super);

    function MoveBoxCommand(box, toPosition, fromPosition) {
      this.box = box;
      this.toPosition = toPosition;
      this.fromPosition = fromPosition;
      MoveBoxCommand.__super__.constructor.call(this);
      this.boxIds.push(this.box.element.attr('id'));
      if (fromPosition == null) {
        this.fromPosition = this.box.currentPosition();
      }
    }

    MoveBoxCommand.prototype.execute = function() {
      return this.box.setPosition(this.toPosition.left, this.toPosition.top);
    };

    MoveBoxCommand.prototype.undo = function() {
      return this.box.setPosition(this.fromPosition.left, this.fromPosition.top);
    };

    MoveBoxCommand.prototype.getType = function() {
      return 'Modify';
    };

    return MoveBoxCommand;

  })(Command);

  /*
  A command that populates the editor with the boxes
  information defined in a json string.
  */


  LoadBoxesCommand = (function(_super) {
    __extends(LoadBoxesCommand, _super);

    /*
    Defines a command that, when executed, populates the editor with the boxes
    information defined in the passed json string.
    
    The jsonBoxes parameter must be a json string like the following :
    [
      {
        "box-id-1":'<div class="ppedit-box">box-id-1 contents in page 1</div>',
        "box-id-2":'<div class="ppedit-box">box-id-2 contents in page 1</div>'
      },
      {
        "box-id-3":'<div class="ppedit-box">box-id-3 contents in page 2</div>',
        "box-id-4":'<div class="ppedit-box">box-id-4 contents in page 2</div>'
      }
    ]
    */


    function LoadBoxesCommand(editor, jsonBoxes) {
      this.editor = editor;
      this.jsonBoxes = jsonBoxes;
      LoadBoxesCommand.__super__.constructor.call(this);
    }

    LoadBoxesCommand.prototype.execute = function() {
      var area, box, boxElement, i, id, pages, panel, rows, _i, _ref, _results;
      pages = JSON.parse(this.jsonBoxes);
      _results = [];
      for (i = _i = 0, _ref = pages.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _ref1, _results1,
            _this = this;
          _ref1 = pages[i];
          _results1 = [];
          for (id in _ref1) {
            boxElement = _ref1[id];
            area = this.editor.areas[i];
            panel = this.editor.panels[i];
            box = new Box(area.boxesContainer.element);
            box.element = $(boxElement);
            area.boxesContainer.addBox(box);
            rows = panel.getRows();
            if (rows.length === 0) {
              _results1.push(panel.addBoxRow(id));
            } else {
              _results1.push(rows.each(function(index, rowNode) {
                var otherBoxId, otherBoxZIndex;
                otherBoxId = $(rowNode).attr('ppedit-box-id');
                otherBoxZIndex = area.boxesContainer.boxes[otherBoxId].element.css('z-index');
                if (parseInt(otherBoxZIndex) < parseInt(box.element.css('z-index')) || index === rows.length - 1) {
                  panel.addBoxRow(id, index);
                  return false;
                }
              }));
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    LoadBoxesCommand.prototype.undo = function() {};

    LoadBoxesCommand.prototype.getType = function() {
      return 'Create';
    };

    LoadBoxesCommand.prototype.getPageNum = function() {};

    return LoadBoxesCommand;

  })(Command);

  /*
  A command that creates one or more boxes with the passed options
  ands adds it to the list.
  */


  CreateBoxesCommand = (function(_super) {
    __extends(CreateBoxesCommand, _super);

    /*
    Creates a command that, when executed, will create
    one or more boxes with a passed array of options, one
    for each box to create and add it to the list of current boxes.
    If no optionsList is passed, only one box is created with the default options.
    */


    function CreateBoxesCommand(editor, pageNum, optionsList) {
      this.editor = editor;
      this.pageNum = pageNum;
      this.optionsList = optionsList;
      CreateBoxesCommand.__super__.constructor.call(this);
      this.boxes = [];
    }

    CreateBoxesCommand.prototype.execute = function() {
      var box, options, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (this.optionsList != null) {
        if (this.boxes.length === 0) {
          _ref = this.optionsList;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            options = _ref[_i];
            this.boxes.push(new Box(this.editor.areas[this.pageNum].boxesContainer.element, options));
          }
        }
        _ref1 = this.boxes;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          box = _ref1[_j];
          _results.push(this._addBox(box));
        }
        return _results;
      } else {
        if (this.boxes.length === 0) {
          this.boxes.push(new Box(this.editor.areas[this.pageNum].boxesContainer.element));
        }
        return this._addBox(this.boxes[0]);
      }
    };

    CreateBoxesCommand.prototype.undo = function() {
      var box, _i, _len, _ref, _results;
      _ref = this.boxes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        if (this.editContainer === true) {
          this.editor.areas[this.pageNum].boxesContainer.removeBoxes([box.element.attr('id')]);
          _results.push(this.editor.panels[this.pageNum].removeBoxRow([box.element.attr('id')]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    /*
    Adds the passed box to the boxcontainer and
    create a corresponding row in the panel
    */


    CreateBoxesCommand.prototype._addBox = function(box) {
      var boxId;
      this.editor.areas[this.pageNum].boxesContainer.addBox(box);
      boxId = box.element.attr('id');
      this.editor.panels[this.pageNum].addBoxRow(boxId);
      if (this.boxIds.indexOf(boxId) === -1) {
        return this.boxIds.push(boxId);
      }
    };

    CreateBoxesCommand.prototype.getType = function() {
      return 'Create';
    };

    CreateBoxesCommand.prototype.getPageNum = function() {
      return this.pageNum;
    };

    return CreateBoxesCommand;

  })(Command);

  CopyBoxesCommand = (function(_super) {
    __extends(CopyBoxesCommand, _super);

    function CopyBoxesCommand(editor, pageNum, boxesClones) {
      this.editor = editor;
      this.pageNum = pageNum;
      this.boxesClones = boxesClones;
      CopyBoxesCommand.__super__.constructor.call(this);
      this.newBoxes = [];
    }

    CopyBoxesCommand.prototype.execute = function() {
      var box, i, _i, _ref, _results,
        _this = this;
      if (this.newBoxes.length === 0) {
        this.boxesClones.each(function(index, boxItem) {
          var box, boxOptions;
          boxOptions = CSSJSON.toJSON(boxItem.style.cssText).attributes;
          box = new Box(_this.editor.areas[_this.pageNum].boxesContainer.element, boxOptions);
          return _this.newBoxes[index] = box;
        });
      }
      _results = [];
      for (i = _i = 0, _ref = this.newBoxes.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        box = this.newBoxes[i];
        this.editor.areas[this.pageNum].boxesContainer.addBox(box);
        box.element.html(this.boxesClones.eq(i).html());
        this.editor.panels[this.pageNum].addBoxRow(box.element.attr('id'));
        _results.push(this.boxIds[i] = box.element.attr('id'));
      }
      return _results;
    };

    CopyBoxesCommand.prototype.undo = function() {
      var box, _i, _len, _ref, _results;
      _ref = this.newBoxes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        this.editor.areas[this.pageNum].boxesContainer.removeBoxes([box.element.attr('id')]);
        _results.push(this.editor.panels[this.pageNum].removeBoxRow([box.element.attr('id')]));
      }
      return _results;
    };

    CopyBoxesCommand.prototype.getType = function() {
      return 'Create';
    };

    CopyBoxesCommand.prototype.getPageNum = function() {
      return this.pageNum;
    };

    return CopyBoxesCommand;

  })(Command);

  /*
  Class that manages a set of commands to undo/redo.
  */


  CommandManager = (function() {
    function CommandManager() {
      this.undoStack = [];
      this.redoStack = [];
    }

    /*
    Inserts the passed command into the undo stack
    flow. This method executes the command by default, set
    the execute argument to false in order to prevent that behavior.
    */


    CommandManager.prototype.pushCommand = function(command, execute) {
      if ((execute == null) || execute) {
        command.execute();
      }
      this.undoStack.push(command);
      return this.redoStack.splice(0, this.redoStack.length);
    };

    /*
    Undo the last executed command
    */


    CommandManager.prototype.undo = function() {
      var lastCommand;
      if (this.undoStack.length > 0) {
        lastCommand = this.undoStack.pop();
        lastCommand.undo();
        return this.redoStack.push(lastCommand);
      }
    };

    /*
    Redo the last executed command
    */


    CommandManager.prototype.redo = function() {
      var redoCommand;
      if (this.redoStack.length > 0) {
        redoCommand = this.redoStack.pop();
        redoCommand.execute();
        return this.undoStack.push(redoCommand);
      }
    };

    /*
    Returns a json string specifying the boxes that have been created, modified and/or removed.
    */


    CommandManager.prototype.getUndoJSON = function() {
      var boxid, command, createdBoxes, hunkId, id, modifiedBoxes, removedBoxes, result, shaObj, value, _i, _j, _len, _len1, _ref, _ref1;
      modifiedBoxes = {};
      createdBoxes = {};
      removedBoxes = {};
      _ref = this.undoStack;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        command = _ref[_i];
        _ref1 = command.boxIds;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          id = _ref1[_j];
          switch (command.getType()) {
            case 'Create':
              createdBoxes['' + id] = {
                html: $('#' + id).clone().wrap('<div></div>').parent().html() || '',
                pageNum: command.getPageNum()
              };
              break;
            case 'Modify':
              if (createdBoxes['' + id] == null) {
                modifiedBoxes['' + id] = $('#' + id).clone().wrap('<div></div>').parent().html() || '';
              }
              break;
            case 'Remove':
              delete modifiedBoxes['' + id];
              if (createdBoxes['' + id] != null) {
                delete createdBoxes['' + id];
              } else {
                removedBoxes['' + id] = '';
              }
          }
        }
      }
      result = {
        modified: (function() {
          var _results;
          _results = [];
          for (boxid in modifiedBoxes) {
            value = modifiedBoxes[boxid];
            _results.push({
              id: boxid,
              html: value
            });
          }
          return _results;
        })(),
        removed: (function() {
          var _results;
          _results = [];
          for (boxid in removedBoxes) {
            value = removedBoxes[boxid];
            _results.push({
              id: boxid,
              html: value
            });
          }
          return _results;
        })(),
        created: [[], []]
      };
      for (boxid in createdBoxes) {
        value = createdBoxes[boxid];
        result.created[value.pageNum].push({
          id: boxid,
          html: value.html
        });
      }
      shaObj = new jsSHA(JSON.stringify(result), "TEXT");
      hunkId = shaObj.getHMAC("", "TEXT", "SHA-256", "HEX");
      result.etag = hunkId;
      return JSON.stringify(result);
    };

    /*
    Deletes the history of commands issued since the editor has been loaded.
    */


    CommandManager.prototype.clearHistory = function() {
      return this.undoStack.splice(0, this.undoStack.length);
    };

    return CommandManager;

  })();

  ChangeStyleCommand = (function(_super) {
    __extends(ChangeStyleCommand, _super);

    function ChangeStyleCommand(editor, boxesSelector, newCssOptions) {
      this.editor = editor;
      this.boxesSelector = boxesSelector;
      this.newCssOptions = newCssOptions;
      ChangeStyleCommand.__super__.constructor.call(this);
      this.boxesToCopy = this.boxesSelector.clone();
    }

    ChangeStyleCommand.prototype.execute = function() {
      var _this = this;
      return this.boxesSelector.each(function(index, item) {
        return $(item).css(_this.newCssOptions);
      });
    };

    ChangeStyleCommand.prototype.undo = function() {
      var _this = this;
      return this.boxesToCopy.each(function(index, item) {
        var prevCssOptions;
        prevCssOptions = CSSJSON.toJSON(_this.boxesToCopy.filter('#' + item.id).attr('style')).attributes;
        return _this.boxesSelector.filter('#' + item.id).css(prevCssOptions);
      });
    };

    ChangeStyleCommand.prototype.getType = function() {
      return 'Modify';
    };

    return ChangeStyleCommand;

  })(Command);

  ChangeDepthCommand = (function(_super) {
    __extends(ChangeDepthCommand, _super);

    /*
    Specify one Command for changing the depth of a box,
    where @boxSelector refers to the box to move, and 
    @moveUp is the parameter that specify the box to move up
    if true, or down if false.
    */


    function ChangeDepthCommand(editor, pageNum, boxSelector, moveUp) {
      this.editor = editor;
      this.pageNum = pageNum;
      this.moveUp = moveUp;
      ChangeDepthCommand.__super__.constructor.call(this);
      this.boxId = boxSelector.attr('id');
    }

    ChangeDepthCommand.prototype.execute = function() {
      if (this.moveUp) {
        return this.swapRowWithUpperRow();
      } else {
        return this.swapRowWithLowerRow();
      }
    };

    ChangeDepthCommand.prototype.undo = function() {
      if (this.moveUp) {
        return this.swapRowWithLowerRow();
      } else {
        return this.swapRowWithUpperRow();
      }
    };

    ChangeDepthCommand.prototype.swapRowWithUpperRow = function() {
      var index, row, upperRow;
      row = this.editor.panels[this.pageNum].getRowWithBoxId(this.boxId);
      index = row.index();
      if (index - 1 >= 0) {
        upperRow = this.editor.panels[this.pageNum].getRowAtIndex(index - 1);
        return this.swapRows(row, upperRow);
      }
    };

    ChangeDepthCommand.prototype.swapRowWithLowerRow = function() {
      var index, lowerRow, row;
      row = this.editor.panels[this.pageNum].getRowWithBoxId(this.boxId);
      index = row.index();
      if (index + 1 < this.editor.panels[this.pageNum].element.find('.ppedit-panel-row').length) {
        lowerRow = this.editor.panels[this.pageNum].getRowAtIndex(index + 1);
        return this.swapRows(row, lowerRow);
      }
    };

    /*
    Swaps RowOne with RowTwo. Also swaps the z-index of the boxes
    associated with each row.
    */


    ChangeDepthCommand.prototype.swapRows = function(rowOne, rowTwo) {
      var rowOneBox, rowOneBoxTempZindex, rowTwoBox;
      if (rowOne.index() < rowTwo.index()) {
        rowOne.insertAfter(rowTwo);
      } else {
        rowOne.insertBefore(rowTwo);
      }
      rowOneBox = this.editor.areas[this.pageNum].boxesContainer.boxes[rowOne.attr('ppedit-box-id')];
      rowOneBoxTempZindex = rowOneBox.element.css('z-index');
      rowTwoBox = this.editor.areas[this.pageNum].boxesContainer.boxes[rowTwo.attr('ppedit-box-id')];
      rowOneBox.element.css('z-index', rowTwoBox.element.css('z-index'));
      return rowTwoBox.element.css('z-index', rowOneBoxTempZindex);
    };

    ChangeDepthCommand.prototype.getType = function() {
      return 'Modify';
    };

    return ChangeDepthCommand;

  })(Command);

  ChangeBoxContentCommand = (function(_super) {
    __extends(ChangeBoxContentCommand, _super);

    function ChangeBoxContentCommand(box, prevContent, newContent) {
      this.box = box;
      this.prevContent = prevContent;
      this.newContent = newContent;
      ChangeBoxContentCommand.__super__.constructor.call(this);
      this.boxIds.push(this.box.element.attr('id'));
    }

    ChangeBoxContentCommand.prototype.execute = function() {
      return this.box.element.html(this.newContent);
    };

    ChangeBoxContentCommand.prototype.undo = function() {
      return this.box.element.html(this.prevContent);
    };

    ChangeBoxContentCommand.prototype.getType = function() {
      return 'Modify';
    };

    return ChangeBoxContentCommand;

  })(Command);

  ChangeBoxOpacityCommand = (function(_super) {
    __extends(ChangeBoxOpacityCommand, _super);

    function ChangeBoxOpacityCommand(editor, pageNum, boxId, prevVal, newVal) {
      this.editor = editor;
      this.pageNum = pageNum;
      this.boxId = boxId;
      this.prevVal = prevVal;
      this.newVal = newVal;
      ChangeBoxOpacityCommand.__super__.constructor.call(this);
    }

    ChangeBoxOpacityCommand.prototype.execute = function() {
      return this.changeOpacityToVal(this.newVal);
    };

    ChangeBoxOpacityCommand.prototype.undo = function() {
      return this.changeOpacityToVal(this.prevVal);
    };

    ChangeBoxOpacityCommand.prototype.changeOpacityToVal = function(value) {
      this.editor.areas[this.pageNum].boxesContainer.changeBoxOpacity(this.boxId, value);
      return this.editor.panels[this.pageNum].element.find("tr[ppedit-box-id=" + this.boxId + "]").find('.ppedit-slider').slider('setValue', parseInt(value * 100));
    };

    ChangeBoxOpacityCommand.prototype.getType = function() {
      return 'Modify';
    };

    return ChangeBoxOpacityCommand;

  })(Command);

  /*
  This class is responsible for creating and providing commands on the fly.
  */


  CommandFactory = (function() {
    function CommandFactory() {}

    CommandFactory.prototype.createChangeFontSizeCommand = function(editor, boxesSelector, newFontSize) {
      return new ChangeStyleCommand(editor, boxesSelector, {
        'font-size': newFontSize
      });
    };

    CommandFactory.prototype.createChangeFontTypeCommand = function(editor, boxesSelector, newFontType) {
      return new ChangeStyleCommand(editor, boxesSelector, {
        'font-family': newFontType
      });
    };

    CommandFactory.prototype.createChangeFontWeightCommand = function(editor, boxesSelector, enable) {
      var fontWeightValue;
      fontWeightValue = enable ? 'bold' : 'normal';
      return new ChangeStyleCommand(editor, boxesSelector, {
        'font-weight': fontWeightValue
      });
    };

    CommandFactory.prototype.createChangeItalicFontCommand = function(editor, boxesSelector, enable) {
      var styleValue;
      styleValue = enable ? 'italic' : 'normal';
      return new ChangeStyleCommand(editor, boxesSelector, {
        'font-style': styleValue
      });
    };

    CommandFactory.prototype.createChangeUnderlineFontCommand = function(editor, boxesSelector, enable) {
      var styleValue;
      styleValue = enable ? 'underline' : 'none';
      return new ChangeStyleCommand(editor, boxesSelector, {
        'text-decoration': styleValue
      });
    };

    CommandFactory.prototype.createRightAlignmentCommand = function(editor, boxesSelector) {
      return new ChangeStyleCommand(editor, boxesSelector, {
        'text-align': 'right'
      });
    };

    CommandFactory.prototype.createLeftAlignmentCommand = function(editor, boxesSelector) {
      return new ChangeStyleCommand(editor, boxesSelector, {
        'text-align': 'left'
      });
    };

    CommandFactory.prototype.createCenterAlignmentCommand = function(editor, boxesSelector) {
      return new ChangeStyleCommand(editor, boxesSelector, {
        'text-align': 'center'
      });
    };

    CommandFactory.prototype.createChangeTextColorCommand = function(editor, boxesSelector, newColor) {
      return new ChangeStyleCommand(editor, boxesSelector, {
        'color': '#' + newColor
      });
    };

    CommandFactory.prototype.createChangeOpacityCommand = function(editor, editPage, boxId, prevVal, newVal) {
      return new ChangeBoxOpacityCommand(editor, editPage, boxId, prevVal, newVal);
    };

    CommandFactory.prototype.createMoveBoxCommand = function(box, toPosition, fromPosition) {
      return new MoveBoxCommand(box, toPosition, fromPosition);
    };

    CommandFactory.prototype.createRemoveBoxesCommand = function(editor, pageNum, boxesSelector) {
      return new RemoveBoxesCommand(editor, pageNum, boxesSelector);
    };

    CommandFactory.prototype.createCopyBoxesCommand = function(editor, editPage, boxesClones) {
      return new CopyBoxesCommand(editor, editPage, boxesClones);
    };

    CommandFactory.prototype.createCreateBoxesCommand = function(editor, editContainer, optionsList) {
      return new CreateBoxesCommand(editor, editContainer, optionsList);
    };

    CommandFactory.prototype.createCreateChangeBoxContentCommand = function(box, prevContent, newContent) {
      return new ChangeBoxContentCommand(box, prevContent, newContent);
    };

    CommandFactory.prototype.createMoveUpCommand = function(editor, pageNum, boxSelector) {
      return new ChangeDepthCommand(editor, pageNum, boxSelector, true);
    };

    CommandFactory.prototype.createMoveDownCommand = function(editor, pageNum, boxSelector) {
      return new ChangeDepthCommand(editor, pageNum, boxSelector, false);
    };

    CommandFactory.prototype.createLoadBoxesCommand = function(editor, jsonBoxes) {
      return new LoadBoxesCommand(editor, jsonBoxes);
    };

    return CommandFactory;

  })();

  /*
  Graphic acting as a container of boxes.
  */


  BoxesContainer = (function(_super) {
    __extends(BoxesContainer, _super);

    BoxesContainer.CLICK_TIME_INTERVAL = 200;

    function BoxesContainer(root) {
      this.root = root;
      BoxesContainer.__super__.constructor.call(this, this.root);
      this.boxes = {};
    }

    BoxesContainer.prototype.buildElement = function() {
      this.element = $('<div></div>').addClass('ppedit-box-container');
      this.element.append('<p class="hDotLine"></p>');
      return this.element.append('<p class="vDotLine"></p>');
    };

    BoxesContainer.prototype.bindEvents = function() {
      var editContainer,
        _this = this;
      editContainer = false;
      return this.element.mousedown(function(event) {
        event.preventDefault();
        return _this.unSelectAllBoxes();
      }).dblclick(function(event) {
        var boxCssOptions;
        boxCssOptions = _this.getPointClicked(event);
        if (_this.getSelectedBoxes().length === 0) {
          return _this.element.trigger('addBoxRequested', [boxCssOptions]);
        }
      }).click(function(event) {
        return _this.root.trigger('unSelectBoxes');
      });
    };

    /*
    Selects the boxes contained in the passed rect.
    The rect position is relative to the root.
    */


    BoxesContainer.prototype.selectBoxesInRect = function(rect) {
      var selectRect,
        _this = this;
      selectRect = {
        topLeft: {
          left: rect.topLeft.left + this.element.scrollLeft(),
          top: rect.topLeft.top + this.element.scrollTop()
        },
        size: rect.size
      };
      if (selectRect.size.width < 0) {
        selectRect.topLeft.left -= Math.abs(selectRect.size.width);
        selectRect.size.width = Math.abs(selectRect.size.width);
      }
      if (selectRect.size.height < 0) {
        selectRect.topLeft.top -= Math.abs(selectRect.size.height);
        selectRect.size.height = Math.abs(selectRect.size.height);
      }
      return this.getAllBoxes().each(function(index, box) {
        if (Geometry.rectContainsRect(selectRect, _this.boxBounds($(box)))) {
          return _this.boxes[box.id].select();
        }
      });
    };

    /*
    Returns the bounding rectangle of the box matching the
    passed box selector.
    */


    BoxesContainer.prototype.boxBounds = function(boxSelector) {
      var result;
      return result = {
        topLeft: {
          left: boxSelector.position().left + this.element.scrollLeft(),
          top: boxSelector.position().top + this.element.scrollTop()
        },
        size: {
          width: boxSelector.width(),
          height: boxSelector.height()
        }
      };
    };

    /*
    Adds the passed Box Object to the Box List
    */


    BoxesContainer.prototype.addBox = function(box) {
      if (box.element == null) {
        box.buildElement();
      }
      this.element.append(box.element);
      box.bindEvents();
      return this.boxes[box.element.attr('id')] = box;
    };

    /*
    Given an array of box ids, deletes all box objects
    with those ids.
    */


    BoxesContainer.prototype.removeBoxes = function(boxIds) {
      var id, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = boxIds.length; _i < _len; _i++) {
        id = boxIds[_i];
        this.boxes[id].element.removeClass('ppedit-box-selected').removeClass('ppedit-box-focus').remove();
        _results.push(delete this.boxes[id]);
      }
      return _results;
    };

    /*
    Returns an array of Box objects corresponding to the
    passed boxIds.
    */


    BoxesContainer.prototype.getBoxesFromIds = function(boxIds) {
      var id;
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = boxIds.length; _i < _len; _i++) {
          id = boxIds[_i];
          if (this.boxes[id] != null) {
            _results.push(this.boxes[id]);
          }
        }
        return _results;
      }).call(this);
    };

    /*
    Returns an list of box objects corresponding to the
    passed selector matching box elements.
    */


    BoxesContainer.prototype.getBoxesFromSelector = function(selector) {
      var box, results, _i, _len, _ref;
      results = {};
      _ref = selector.toArray();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        results[box.id] = this.boxes[box.id];
      }
      return results;
    };

    /*
    Returns a selector matching all boxes
    */


    BoxesContainer.prototype.getAllBoxes = function() {
      return this.element.find('.ppedit-box');
    };

    /*
    Returns a selector to the currently selected boxes
    */


    BoxesContainer.prototype.getSelectedBoxes = function() {
      return this.element.find('.ppedit-box:focus, .ppedit-box-selected, .ppedit-box-focus');
    };

    /*
    Returns a selector to the currently selected boxes,
    excluding the focused one, if any.
    */


    BoxesContainer.prototype.getNotFocusedSelectedBoxes = function() {
      return this.element.find('.ppedit-box-selected');
    };

    /*
    Changes the opacity of one box
    
    @param boxid [Int] the id of the box to change
    @param opacityVal [Int] the value of the opacity to change the box to.
    */


    BoxesContainer.prototype.changeBoxOpacity = function(boxid, opacityVal) {
      return this.boxes[boxid].element.css("opacity", opacityVal);
    };

    /*
    Unselects all boxes.
    */


    BoxesContainer.prototype.unSelectAllBoxes = function() {
      var box, id, _ref, _results;
      _ref = this.boxes;
      _results = [];
      for (id in _ref) {
        box = _ref[id];
        box.stopMoving();
        _results.push(box.element.removeClass('ppedit-box-focus').blur());
      }
      return _results;
    };

    /*
    Returns the position relative to the top left corner
    of the element from the passed mouseEvent.
    */


    BoxesContainer._rectContainsRect = function(outerRect, innerRect) {
      return innerRect.topLeft.x >= outerRect.topLeft.x && innerRect.topLeft.y >= outerRect.topLeft.y && innerRect.topLeft.x + innerRect.size.width <= outerRect.topLeft.x + outerRect.size.width && innerRect.topLeft.y + innerRect.size.height <= outerRect.topLeft.y + outerRect.size.height;
    };

    /*
    Returns the mouse coordinates of the passed mouseEvent
    relative to the boxes Container position.
    */


    BoxesContainer.prototype.getPointClicked = function(mouseEvent) {
      return {
        left: event.offsetX + this.element.scrollLeft(),
        top: event.offsetY + this.element.scrollTop()
      };
    };

    /*
    Returns a JSON object containing a description of
    all the boxes currently existing in this container.
    */


    BoxesContainer.prototype.getAllHunks = function() {
      var box, boxId;
      return (function() {
        var _ref, _results;
        _ref = this.boxes;
        _results = [];
        for (boxId in _ref) {
          box = _ref[boxId];
          _results.push({
            id: boxId,
            html: box.element.wrap("<div></div>").parent().html()
          });
        }
        return _results;
      }).call(this);
    };

    return BoxesContainer;

  })(Graphic);

  /*
  This graphic contains a canvas element used for drawing
  figures dynamically on the browser.
  */


  Canvas = (function(_super) {
    __extends(Canvas, _super);

    function Canvas(root) {
      this.root = root;
      Canvas.__super__.constructor.call(this, this.root);
      this.downPosition = void 0;
      this.rectSize = void 0;
      this._context = void 0;
    }

    Canvas.prototype.buildElement = function() {
      return this.element = $('<canvas></canvas>').addClass('ppedit-canvas').attr('width', '980px').attr('height', '1386px');
    };

    Canvas.prototype.bindEvents = function() {
      var _this = this;
      this.element.on('containerMouseDown', function(event, mouseEvent) {
        _this.downPosition = {
          left: mouseEvent.offsetX,
          top: mouseEvent.offsetY
        };
        return _this.rectSize = {
          width: 0,
          height: 0
        };
      }).on('containerMouseMove', function(event, mouseMoveEvent, delta) {
        if ((_this.downPosition != null) && (_this.rectSize != null) && (delta != null)) {
          _this.rectSize.width += delta.x;
          _this.rectSize.height += delta.y;
          return _this.drawRect(_this.downPosition, _this.rectSize);
        }
      }).on('containerMouseLeave', function() {
        return _this.clear();
      }).on('containerMouseUp', function() {
        if ((_this.downPosition != null) && (_this.rectSize != null)) {
          _this.root.trigger('canvasRectSelect', [
            {
              topLeft: _this.downPosition,
              size: _this.rectSize
            }
          ]);
        }
        return _this.clear();
      });
      return this._context = this.element.get(0).getContext('2d');
    };

    /*
    Draws a rectangle at the passed coordinate
    */


    Canvas.prototype.drawRect = function(topLeft, size) {
      this._context.clearRect(0, 0, this.element.width(), this.element.height());
      this._context.globalAlpha = 0.2;
      this._context.beginPath();
      this._context.rect(topLeft.left, topLeft.top, size.width, size.height);
      this._context.fillStyle = 'blue';
      return this._context.fill();
    };

    /*
    Clears the canvas of any drawn figures.
    */


    Canvas.prototype.clear = function() {
      this._context.clearRect(0, 0, this.element.width(), this.element.height());
      this.downPosition = void 0;
      return this.rectSize = void 0;
    };

    return Canvas;

  })(Graphic);

  /*
  Graphic containing the image of a grid to hide/display.
  */


  Grid = (function(_super) {
    __extends(Grid, _super);

    function Grid(root) {
      this.root = root;
      Grid.__super__.constructor.call(this, this.root);
    }

    Grid.prototype.buildElement = function() {
      return this.element = $('\
       <div class="ppedit-grid">\
            <svg width="100%" height="100%">\
              <defs>\
                <pattern id="smallGrid" width="8" height="8" patternUnits="userSpaceOnUse">\
                  <path d="M 8 0 L 0 0 0 8" fill="none" stroke="gray" stroke-width="0.5"/>\
                </pattern>\
                <pattern id="grid" width="80" height="80" patternUnits="userSpaceOnUse">\
                  <rect width="80" height="80" fill="url(#smallGrid)"/>\
                  <path d="M 80 0 L 0 0 0 80" fill="none" stroke="gray" stroke-width="1"/>\
                </pattern>\
              </defs>\
\
              <rect width="100%" height="100%" fill="url(#grid)" />\
            </svg>\
      </div>');
    };

    /*
    Hides/show the grid.
    */


    Grid.prototype.toggleGrid = function() {
      return this.element.toggle();
    };

    return Grid;

  })(Graphic);

  /*
  A graphic acting as a container of a boxesContainer, a canvas and a grid.
  */


  EditArea = (function(_super) {
    __extends(EditArea, _super);

    function EditArea(root) {
      this.root = root;
      EditArea.__super__.constructor.call(this, this.root);
      this.prevMouseMoveEvent = void 0;
      this.canvas = void 0;
      this.grid = void 0;
      this.boxesContainer = void 0;
    }

    EditArea.prototype.buildElement = function() {
      this.element = $('<div></div>').addClass("ppedit-container").addClass("col-xs-8").attr('tabindex', 0);
      this.boxesContainer = new BoxesContainer(this.element);
      this.canvas = new Canvas(this.element);
      this.grid = new Grid(this.element);
      this.boxesContainer.buildElement();
      this.canvas.buildElement();
      this.grid.buildElement();
      this.element.append(this.boxesContainer.element);
      this.element.append(this.canvas.element);
      return this.element.append(this.grid.element);
    };

    EditArea.prototype.bindEvents = function() {
      var _this = this;
      this.element.mousedown(function() {
        if (_this.boxesContainer.getNotFocusedSelectedBoxes().length === 0) {
          return _this.canvas.element.trigger('containerMouseDown', [event]);
        }
      }).mousemove(function(event) {
        var delta;
        delta = void 0;
        if (_this.prevMouseMoveEvent != null) {
          delta = {
            x: event.clientX - _this.prevMouseMoveEvent.clientX,
            y: event.clientY - _this.prevMouseMoveEvent.clientY
          };
        }
        _this.element.find('*').trigger('containerMouseMove', [event, delta]);
        return _this.prevMouseMoveEvent = event;
      }).mouseleave(function() {
        _this.element.find('*').trigger('containerMouseLeave');
        return _this.prevMouseMoveEvent = void 0;
      }).mouseup(function(event) {
        _this.element.find('*').trigger('containerMouseUp', [event]);
        return _this.prevMouseMoveEvent = void 0;
      }).keydown(function(event) {
        return _this.element.find('*').trigger('containerKeyDown', [event]);
      }).on('canvasRectSelect', function(event, rect) {
        return _this.boxesContainer.selectBoxesInRect(rect);
      });
      this.boxesContainer.bindEvents();
      this.canvas.bindEvents();
      return this.grid.bindEvents();
    };

    return EditArea;

  })(Graphic);

  /*
  Graphic containing the settings to apply to boxes.
  */


  Panel = (function(_super) {
    __extends(Panel, _super);

    function Panel(root) {
      this.root = root;
      this.prevOpacityVal = void 0;
      Panel.__super__.constructor.call(this, this.root);
    }

    Panel.prototype.buildElement = function() {
      return this.element = $('\
            <div class="col-xs-5">\
\
              <form class="form-inline" role="form" style="padding-top: 5px;">\
                <div class="form-group col-lg-20">\
                  <fieldset style="padding-left: 15px;">\
\
                      <button class="btn btn-sm btn-primary addElementBtn" type="button" style="width: 150px;"><span class="glyphicon glyphicon-plus-sign"></span> Add Element</button>\
\
                      <button class="btn btn-sm btn-info moveElementUpBtn" type="button"><span class="glyphicon glyphicon-circle-arrow-up"></span></button>\
                      \
                      <button class="btn btn-sm btn-info moveElementDownBtn" type="button"><span class="glyphicon glyphicon-circle-arrow-down"></span></button> \
\
                      <table class="table table-hover dataPanel">\
                          <thead>\
                              <tr>\
                                <th>Remove</th>\
                                <th>Name of Element</th>\
                                <th>Opacity</th>\
                              </tr>\
                          </thead>\
                          <tbody>\
\
                          </tbody>\
                      </table>\
                      <!-- <button type="submit" class="btn btn btn-success" style="float: right;">Save</button> -->\
                  </fieldset>\
                </div>\
              </form>\
            </div>');
    };

    Panel.prototype.bindEvents = function() {
      var _this = this;
      this.element.find(".addElementBtn").click(function() {
        return _this.element.trigger('panelClickAddBtnClick');
      });
      this.element.find('.moveElementUpBtn').click(function() {
        return _this.element.trigger('moveElementUpBtnClick');
      });
      return this.element.find('.moveElementDownBtn').click(function() {
        return _this.element.trigger('moveElementDownBtnClick');
      });
    };

    /*
    Adds a row to be associated with the passed box id.
    */


    Panel.prototype.addBoxRow = function(boxid, index) {
      var newRow,
        _this = this;
      newRow = $("            <tr class='ppedit-panel-row'>                <td><span class=\"glyphicon glyphicon-remove-sign icon-4x red deleteElementBtn\"></span></td>                <td><p class='ppedit-rowName'></p>                <td><div class=\"ppedit-slider\"></div></td>            </tr>").attr('ppedit-box-id', boxid);
      if ((index == null) || index === 0) {
        this.element.find('.dataPanel tbody').prepend(newRow);
      } else {
        newRow.insertBefore(this.element.find('tbody .ppedit-panel-rown:nth-child("' + index + '")'));
      }
      newRow.find(".ppedit-slider").slider({
        min: 0,
        max: 100,
        step: 1,
        value: 100
      }).on('slideStart', function(event) {
        return _this.prevOpacityVal = $(event.target).val() || 100;
      }).on('slide', function(event) {
        var opacityVal;
        opacityVal = $(event.target).val();
        return $(event.target).trigger('onRowSliderValChanged', [boxid, parseInt(opacityVal) / 100]);
      }).on('slideStop', function(event) {
        var opacityStopVal;
        opacityStopVal = $(event.target).val();
        if (_this.prevOpacityVal !== opacityStopVal) {
          $(event.target).trigger('onRowSliderStopValChanged', [boxid, parseInt(_this.prevOpacityVal) / 100, parseInt(opacityStopVal) / 100]);
        }
        return _this.prevOpacityVal = void 0;
      });
      return newRow.find(".deleteElementBtn").on('click', function(event) {
        return $(event.target).trigger('onRowDeleteBtnClick', [boxid]);
      });
    };

    /*
    Removes the row associated with the passed box id.
    */


    Panel.prototype.removeBoxRow = function(boxId) {
      return this.getRowWithBoxId(boxId).remove();
    };

    /*
    Returns a selector matching the row associated with
    the passed box Id.
    */


    Panel.prototype.getRowWithBoxId = function(boxId) {
      return this.element.find("tr[ppedit-box-id=" + boxId + "]").eq(0);
    };

    /*
    Returns a selector matching the row at the specified index.
    */


    Panel.prototype.getRowAtIndex = function(index) {
      return this.element.find(".ppedit-panel-row").eq(index);
    };

    /*
    Sets the name of the row.
    */


    Panel.prototype.setRowName = function(boxId, name) {
      return this.getRowWithBoxId(boxId).find('ppedit-rowName').val(name);
    };

    /*
    Returns a selector matching with all rows.
    */


    Panel.prototype.getRows = function() {
      return this.element.find(".ppedit-panel-row");
    };

    return Panel;

  })(Graphic);

  /*
  Helper class used to temporarily save DOM nodes.
  */


  Clipboard = (function() {
    function Clipboard() {
      this.items = void 0;
    }

    /*
    Saves the passed newItems jQuery selector
    */


    Clipboard.prototype.pushItems = function(newItems) {
      return this.items = $.extend(true, {}, newItems);
    };

    /*
    Returns the saved jQuery selector and removes it from the save.
    */


    Clipboard.prototype.popItems = function() {
      var results;
      results = this.items;
      this.items = void 0;
      if (results != null) {
        return results;
      } else {
        return [];
      }
    };

    return Clipboard;

  })();

  /*
  Graphic acting a the main container of the PPEditor.
  */


  PPEditor = (function(_super) {
    __extends(PPEditor, _super);

    PPEditor.NUMBER_OF_PAGES = 2;

    function PPEditor(root) {
      this.root = root;
      PPEditor.__super__.constructor.call(this, this.root);
      this.clipboard = new Clipboard;
      this.commandManager = new CommandManager;
      this.cmdFactory = new CommandFactory;
      this.controller = void 0;
    }

    PPEditor.prototype.buildElement = function() {
      var i, row, _i, _j, _k, _ref, _ref1, _ref2;
      this.element = $('\
      <div class="container" tabindex="0">\
        <div class="row"></div>\
      </div>\
    ');
      this.controller = ControllerFactory.getController(this.element);
      row = this.element.find('.row');
      this.superContainer = $('\
      <div class="superContainer">\
      </div>\
    ');
      this.superPanel = $('\
      <div class="superPanel" style="clear:both;">\
      </div>\
    ');
      this.areas = [];
      this.panels = [];
      this.mainPanel = new MainPanel(this.element);
      this.fontPanel = new FontPanel(row);
      for (i = _i = 0, _ref = PPEditor.NUMBER_OF_PAGES - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.areas.push(new EditArea(row));
        this.panels.push(new Panel(row));
      }
      for (i = _j = 0, _ref1 = PPEditor.NUMBER_OF_PAGES - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        this.areas[i].buildElement();
        this.panels[i].buildElement();
      }
      this.mainPanel.buildElement();
      this.fontPanel.buildElement();
      for (i = _k = 0, _ref2 = PPEditor.NUMBER_OF_PAGES - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        this.superContainer.append($('<div class="editContainer"></div>').append(this.areas[i].element));
        this.superPanel.append($('<div class="panelContainer" style="clear:both;"></div>').append(this.panels[i].element));
      }
      row.append(this.superContainer);
      row.append(this.mainPanel.element);
      row.append(this.fontPanel.element);
      return row.append(this.superPanel);
    };

    PPEditor.prototype.bindEvents = function() {
      var i, _i, _ref,
        _this = this;
      this.element.on('requestUndo', function(event) {
        return _this.commandManager.undo();
      }).on('requestRedo', function(event) {
        return _this.commandManager.redo();
      }).on('requestDelete', function(event) {
        var i, _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = PPEditor.NUMBER_OF_PAGES - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (_this.areas[i].boxesContainer.getSelectedBoxes().length !== 0) {
            _results.push(_this.commandManager.pushCommand(_this.cmdFactory.createRemoveBoxesCommand(_this, i, _this.areas[0].boxesContainer.getSelectedBoxes())));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }).on('requestCopy', function(event) {
        var i, _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = PPEditor.NUMBER_OF_PAGES - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (_this.areas[i].boxesContainer.getSelectedBoxes().length !== 0) {
            _this.clipboard.pushItems({
              pageNum: i,
              boxes: _this.areas[i].boxesContainer.getSelectedBoxes()
            });
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }).on('requestPaste', function(event) {
        var items;
        items = _this.clipboard.popItems();
        if ((items.boxes != null) && items.boxes.length > 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createCopyBoxesCommand(_this, items.pageNum, items.boxes));
        }
      }).on('textColorChanged', function(event, hex) {
        var boxSelected;
        boxSelected = _this.getSelectedBoxes();
        if (boxSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeTextColorCommand(_this, _this.getPageNum(boxSelected), _this.areas[0].boxesContainer.getSelectedBoxes(), hex));
        }
      }).on('graphicContentChanged', function(event, params) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createCreateChangeBoxContentCommand(params.graphic, params.prevContent, params.newContent), false);
      }).on('boxMoved', function(event, box, currentPosition, originalPosition) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createMoveBoxCommand(box, currentPosition, originalPosition), false);
      });
      this.element.find('.row').on('moveElementUpBtnClick', function(event) {
        var boxes, pageNum;
        boxes = _this.getSelectedBoxes();
        pageNum = _this.getPanelNum($(event.target));
        if (boxes.length > 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createMoveUpCommand(_this, pageNum, boxes));
        }
      }).on('moveElementDownBtnClick', function(event) {
        var boxes, pageNum;
        boxes = _this.getSelectedBoxes();
        pageNum = _this.getPanelNum($(event.target));
        if (boxes.length > 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createMoveDownCommand(_this, pageNum, boxes));
        }
      }).on('panelClickAddBtnClick', function(event) {
        var pageNum;
        pageNum = _this.getPanelNum($(event.target));
        return _this.commandManager.pushCommand(_this.cmdFactory.createCreateBoxesCommand(_this, pageNum));
      }).on('panelClickGridBtnClick', function(event) {
        var area, _i, _len, _ref, _results;
        _ref = _this.areas;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          area = _ref[_i];
          _results.push(area.grid.toggleGrid());
        }
        return _results;
      }).on('onRowDeleteBtnClick', function(event, boxId) {
        var pageNum;
        pageNum = _this.getPanelNum($(event.target));
        return _this.commandManager.pushCommand(_this.cmdFactory.createRemoveBoxesCommand(_this, pageNum, _this.root.find('#' + boxId)));
      }).on('onRowSliderValChanged', function(event, boxId, opacityVal) {
        var pageNum;
        pageNum = _this.getPanelNum($(event.target));
        return _this.areas[pageNum].boxesContainer.changeBoxOpacity(boxId, opacityVal);
      }).on('onRowSliderStopValChanged', function(event, boxId, prevVal, newVal) {
        var pageNum;
        pageNum = _this.getPanelNum($(event.target));
        return _this.commandManager.pushCommand(_this.cmdFactory.createChangeOpacityCommand(_this, pageNum, boxId, prevVal, newVal));
      }).on('addBoxRequested', function(event, boxCssOptions) {
        var pageNum;
        pageNum = _this.getPageNum($(event.target));
        return _this.commandManager.pushCommand(_this.cmdFactory.createCreateBoxesCommand(_this, pageNum, [boxCssOptions]));
      }).on('fontTypeChanged', function(event, newFontType) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontTypeCommand(_this, boxesSelected, newFontType));
        }
      }).on('fontSizeChanged', function(event, newFontSize) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontSizeCommand(_this, boxesSelected, newFontSize));
        }
      }).on('fontWeightBtnEnableClick', function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontWeightCommand(_this, boxesSelected, true));
        }
      }).on('fontWeightBtnDisableClick', function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontWeightCommand(_this, boxesSelected, false));
        }
      }).on('fontUnderlinedBtnEnableClick', function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeUnderlineFontCommand(_this, boxesSelected, true));
        }
      }).on('fontUnderlinedBtnDisableClick', function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeUnderlineFontCommand(_this, boxesSelected, false));
        }
      }).on('fontItalicBtnEnableClick', function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeItalicFontCommand(_this, boxesSelected, true));
        }
      }).on('fontItalicBtnDisableClick', function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createChangeItalicFontCommand(_this, boxesSelected, false));
        }
      }).on('rightAlignment', function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createRightAlignmentCommand(_this, boxesSelected));
        }
      }).on('leftAlignment', function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createLeftAlignmentCommand(_this, boxesSelected));
        }
      }).on('centerAlignment', function(event) {
        var boxesSelected;
        boxesSelected = _this.getSelectedBoxes();
        if (boxesSelected.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createCenterAlignmentCommand(_this, boxesSelected));
        }
      }).on('bulletPointBtnEnableClick', function(event) {
        var box, boxes, boxesSelected, id, pageNum, _results;
        boxesSelected = _this.getSelectedBoxes();
        pageNum = _this.getPageNum(boxesSelected);
        boxes = _this.areas[pageNum].boxesContainer.getBoxesFromSelector(boxesSelected.eq(0));
        _results = [];
        for (id in boxes) {
          box = boxes[id];
          _results.push(box.addBulletPoint());
        }
        return _results;
      }).on('orderedPointBtnEnableClick', function(event) {
        var box, boxes, boxesSelected, id, pageNum, _results;
        boxesSelected = _this.getSelectedBoxes();
        pageNum = _this.getPageNum(boxesSelected);
        boxes = _this.areas[pageNum].boxesContainer.getBoxesFromSelector(boxesSelected.eq(0));
        _results = [];
        for (id in boxes) {
          box = boxes[id];
          _results.push(box.addOrderedPointList());
        }
        return _results;
      }).on('boxSelected', function(event, box) {
        return _this.fontPanel.setSettingsFromStyle(box.element.get(0).style);
      });
      for (i = _i = 0, _ref = PPEditor.NUMBER_OF_PAGES - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.areas[i].bindEvents();
        this.panels[i].bindEvents();
      }
      this.fontPanel.bindEvents();
      this.controller.bindEvents();
      return this.mainPanel.bindEvents();
    };

    /*
    Returns a selector to the currently selected boxes
    */


    PPEditor.prototype.getSelectedBoxes = function() {
      return this.element.find('.ppedit-box:focus, .ppedit-box-selected, .ppedit-box-focus');
    };

    PPEditor.prototype.getPageNum = function(boxSelector) {
      return boxSelector.parents('.editContainer').index();
    };

    PPEditor.prototype.getPanelNum = function(panelElement) {
      return panelElement.parents('.panelContainer').index();
    };

    /*
    Populates the editor with the boxes
    information defined in the passed json string.
    
    @param [String] jsonBoxes the JSON-formatted string containing
    the boxes information, this parameter look like the following :
    [
      {
        "box-id-1":'<div class="ppedit-box">box-id-1 contents in page 1</div>',
        "box-id-2":'<div class="ppedit-box">box-id-2 contents in page 1</div>'
      },
      {
        "box-id-3":'<div class="ppedit-box">box-id-1 contents in page 2</div>',
        "box-id-4":'<div class="ppedit-box">box-id-2 contents in page 2</div>'
      }
    ]
    */


    PPEditor.prototype.load = function(jsonBoxes) {
      var command;
      command = this.cmdFactory.createLoadBoxesCommand(this, jsonBoxes);
      return command.execute();
    };

    /*
    Returns a JSON string containing a description of
    all the boxes currently existing in the editor.
    */


    PPEditor.prototype.getAllHunks = function() {
      var area;
      return JSON.stringify((function() {
        var _i, _len, _ref, _results;
        _ref = this.areas;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          area = _ref[_i];
          _results.push(this.area.boxesContainer.getAllHunks());
        }
        return _results;
      }).call(this));
    };

    return PPEditor;

  })(Graphic);

  MainPanel = (function(_super) {
    __extends(MainPanel, _super);

    function MainPanel(root) {
      this.root = root;
      MainPanel.__super__.constructor.call(this, this.root);
    }

    MainPanel.prototype.buildElement = function() {
      return this.element = $('\
            <div class="left-sidebar">\
              <button class="undoBtn btn btn-default icon-set" type="button"></button>\
              <button class="redoBtn btn btn-default icon-set" type="button"></button>\
              <button class="gridElementBtn btn btn-default icon-set" type="button"></button>\
              <button class="snapBtn btn btn-default icon-set" type="button"></button>\
            </div>');
    };

    MainPanel.prototype.bindEvents = function() {
      var _this = this;
      this.element.find('.snapBtn.btn.btn-default').click(function() {
        if (!$(event.target).hasClass("snapBtn-selected")) {
          return $(event.target).addClass("snapBtn-selected");
        } else {
          return $(event.target).removeClass("snapBtn-selected");
        }
      });
      this.element.find('.glyphicon.glyphicon-magnet').click(function() {
        if (!$(event.target).parent().hasClass("snapBtn-selected")) {
          return $(event.target).parent().addClass("snapBtn-selected");
        } else {
          return $(event.target).parent().removeClass("snapBtn-selected");
        }
      });
      this.element.find(".gridElementBtn").click(function() {
        return _this.root.find('.row').trigger('panelClickGridBtnClick');
      });
      this.element.find(".undoBtn").click(function() {
        return _this.root.find('.row').trigger('requestUndo');
      });
      return this.element.find(".redoBtn").click(function() {
        return _this.root.find('.row').trigger('requestRedo');
      });
    };

    return MainPanel;

  })(Graphic);

  /*
  Graphic containing the font settings to apply to boxes.
  */


  FontPanel = (function(_super) {
    __extends(FontPanel, _super);

    function FontPanel(root) {
      this.root = root;
      FontPanel.__super__.constructor.call(this, this.root);
    }

    FontPanel.prototype.buildElement = function() {
      return this.element = $('\
            <div class="col-xs-5" style ="padding-left: 30px;padding-bottom: 10px">\
            <select class="fontTypeBtn">\
                 <option value="Times New Roman" selected>Times New Roman</option>\
                 <option value="Arial">Arial</option>\
                 <option value="Inconsolata">Inconsolata</option>\
                 <option value="Glyphicons Halflings">Glyphicons Halflings</option>\
               </select>\
               \
               <select class="fontSizeBtn">\
                 <option value="6">6</option>\
                 <option value="8">8</option>\
                 <option value="10" selected>10</option>\
                 <option value="11">11</option>\
                 <option value="12">12</option>\
                 <option value="14">14</option>\
                 <option value="16">16</option>\
                 <option value="20">20</option>\
               </select>\
               <button class="colorPicker btn btn-default" id="picker"><span class="glyphicon glyphicon-font"></button>\
               <div class="btn-group" data-toggle="buttons">\
                <label class="wbtn btn btn-default">\
                  <input type="checkbox"><span class="weightBtn glyphicon glyphicon-bold"></span>\
                </label>\
                <label class="ubtn btn btn-default">\
                  <input type="checkbox"><span class="underlineBtn glyphicon glyphicon-text-width"></span>\
                </label>\
                <label class="ibtn btn btn-default">\
                  <input type="checkbox"><span class="italicBtn glyphicon glyphicon-italic"></span>\
                </label>\
               </div>\
\
               <br />\
               \
               <div class="btn-group" data-toggle="buttons">\
                <label class="leftAlignBtn btn btn-default">\
                  <input type="radio" id="option1"><span class="glyphicon glyphicon-align-left">\
                </label>\
                <label class="centerAlignBtn btn btn-default">\
                  <input type="radio" id="option2"><span class="glyphicon glyphicon-align-center">\
                </label>\
                <label class="rightAlignBtn btn btn-default">\
                  <input type="radio" id="option3"><span class="glyphicon glyphicon-align-right">\
                </label>\
               </div>\
               \
			   <br />\
               <div class="btn-group" data-toggle="buttons">\
                <label class="bulletPointBtn btn btn-default">\
                  <input type="radio" id="option1"><span class="glyphicon glyphicon-list">\
                </label>\
                <label class="orderedPointBtn btn btn-default">\
                  <input type="radio" id="option2"><span class="glyphicon glyphicon-list-alt">\
                </label>\
               </div>\
              </div>');
    };

    FontPanel.prototype.bindEvents = function() {
      var _this = this;
      this.element.find("select.fontTypeBtn").change(function(event) {
        var newFontType;
        newFontType = $(event.target).find("option:selected").val();
        return _this.root.trigger('fontTypeChanged', [newFontType]);
      });
      this.element.find("select.fontSizeBtn").change(function(event) {
        var newFontSize;
        newFontSize = $(event.target).find("option:selected").val() + "pt";
        return _this.root.trigger('fontSizeChanged', [newFontSize]);
      });
      this.element.find(".colorPicker").click(function(event) {
        return $(event.target).colpick({
          colorScheme: 'dark',
          layout: 'rgbhex',
          color: 'ff8800',
          onSubmit: function(hsb, hex, rgb, el) {
            _this.element.trigger('textColorChanged', [hex]);
            return $(el).colpickHide();
          }
        });
      });
      this.element.find(".wbtn").click(function(event) {
        var btn;
        btn = $(event.target).toggleClass('.ppedit-btn-enabled');
        return _this.root.trigger(btn.hasClass('.ppedit-btn-enabled') ? 'fontWeightBtnEnableClick' : 'fontWeightBtnDisableClick');
      });
      this.element.find(".ubtn").click(function(event) {
        var btn;
        btn = $(event.target).toggleClass('.ppedit-btn-enabled');
        return _this.root.trigger(btn.hasClass('.ppedit-btn-enabled') ? 'fontUnderlinedBtnEnableClick' : 'fontUnderlinedBtnDisableClick');
      });
      this.element.find(".ibtn").click(function(event) {
        var btn;
        btn = $(event.target).toggleClass('.ppedit-btn-enabled');
        return _this.root.trigger(btn.hasClass('.ppedit-btn-enabled') ? 'fontItalicBtnEnableClick' : 'fontItalicBtnDisableClick');
      });
      this.element.find(".rightAlignBtn").click(function(event) {
        return _this.root.trigger('rightAlignment');
      });
      this.element.find(".leftAlignBtn").click(function(event) {
        return _this.root.trigger('leftAlignment');
      });
      this.element.find(".centerAlignBtn").click(function(event) {
        return _this.root.trigger('centerAlignment');
      });
      this.element.find(".bulletPointBtn").click(function(event) {
        return _this.root.trigger('bulletPointBtnEnableClick');
      });
      this.element.find(".orderedPointBtn").click(function(event) {
        return _this.root.trigger('orderedPointBtnEnableClick');
      });
      this.element.find(".gridElementBtn").click(function() {
        return _this.root.trigger('panelClickGridBtnClick');
      });
      return this.element.find('.snapBtn').click(function() {
        if (!$(event.target).hasClass("snapBtn-selected")) {
          return $(event.target).addClass("snapBtn-selected");
        } else {
          return $(event.target).removeClass("snapBtn-selected");
        }
      });
    };

    FontPanel.prototype.changeColor = function(hsb, hex, rgb, el) {
      $(el).css('background-color', '#' + hex);
      return $(el).colpickHide();
    };

    FontPanel.prototype.setSettingsFromStyle = function(style) {
      this.element.find('.fontTypeBtn').children().removeAttr('selected').filter('option[value=' + style['font-family'] + ']').attr('selected', 'selected');
      this.element.find('.fontSizeBtn').children().removeAttr('selected').filter('option[value="' + parseInt(style['font-size']) + '"]').attr('selected', 'selected');
      this._switchBtn('.wbtn', style['font-weight'] === 'bold');
      this._switchBtn('.ubtn', style['text-decoration'].indexOf('underline') !== -1);
      this._switchBtn('.ibtn', style['font-style'] === 'italic');
      this.element.find(".centerAlignBtn").removeClass("active");
      this.element.find(".leftAlignBtn").removeClass("active");
      this.element.find(".rightAlignBtn").removeClass("active");
      if (style['text-align'] === "left") {
        return this.element.find(".leftAlignBtn").addClass("active");
      } else if (style['text-align'] === "center") {
        return this.element.find(".centerAlignBtn").addClass("active");
      } else if (style['text-align'] === "right") {
        return this.element.find(".rightAlignBtn").addClass("active");
      }
    };

    FontPanel.prototype._switchBtn = function(selector, switchOn) {
      if (switchOn) {
        return this.element.find(selector).addClass('ppedit-btn-enabled active');
      } else {
        return this.element.find(selector).removeClass('ppedit-btn-enabled active');
      }
    };

    return FontPanel;

  })(Graphic);

  /*
  FooBar jQuery Plugin v1.0 - It makes Foo as easy as coding Bar (?).
  Release: 19/04/2013
  Author: Joe Average <joe@average.me>
  
  http://github.com/joeaverage/foobar
  
  Licensed under the WTFPL license: http://www.wtfpl.net/txt/copying/
  */


  (function($, window, document) {
    var $this, methods, _anotherState, _editor, _flag, _internals, _settings;
    $this = void 0;
    _settings = {
      "default": 'cool!'
    };
    _flag = false;
    _anotherState = null;
    _editor = null;
    methods = {
      init: function(options) {
        $this = $(this);
        $.extend(_settings, options || {});
        _editor = new PPEditor($this);
        _editor.buildElement();
        $this.append(_editor.element);
        _editor.bindEvents();
        return $this;
      },
      doSomething: function(what) {
        return $this;
      },
      destroy: function() {
        return $this;
      },
      save: function() {
        return _editor.commandManager.getUndoJSON();
      },
      allHunks: function() {
        return _editor.area.boxesContainer.getAllHunks();
      },
      clearHistory: function() {
        _editor.commandManager.clearHistory();
        return $this;
      },
      load: function(options) {
        _editor.load(options.hunks);
        return $this;
      }
    };
    _internals = {
      toggleFlag: function() {
        return _flag = !_flag;
      }
    };
    return $.fn.ppedit = function(method) {
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof method === "object" || !method) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error("Method " + method + " does not exist on jquery.ppedit");
      }
    };
  })(jQuery, window, document);

}).call(this);
