// Generated by CoffeeScript 1.6.3
var Controller, CreateBoxCommand, EditorManager, ICommand, MoveBoxCommand,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ICommand = (function() {
  function ICommand(root) {
    this.root = root;
  }

  return ICommand;

})();

CreateBoxCommand = (function(_super) {
  __extends(CreateBoxCommand, _super);

  function CreateBoxCommand(root, options) {
    this.root = root;
    this.options = options;
    CreateBoxCommand.__super__.constructor.call(this, this.root);
    this.box = null;
  }

  CreateBoxCommand.prototype.execute = function() {
    var settings;
    settings = $.extend({
      left: '50px',
      top: '50px',
      width: '100px',
      height: '200px'
    }, this.options);
    this.box = $('<div></div>').addClass('ppedit-box').attr('id', $.now()).css(settings).attr('draggable', true).on('dragstart', function(event) {
      event.originalEvent.dataTransfer.setData('mouseOffsetX', event.originalEvent.offsetX);
      event.originalEvent.dataTransfer.setData('mouseOffsetY', event.originalEvent.offsetY);
      return event.originalEvent.dataTransfer.setData('boxId', this.id);
    });
    return this.root.append(this.box);
  };

  CreateBoxCommand.prototype.undo = function() {
    return this.root.remove(this.box);
  };

  return CreateBoxCommand;

})(ICommand);

MoveBoxCommand = (function(_super) {
  __extends(MoveBoxCommand, _super);

  function MoveBoxCommand(box, newX, newY) {
    this.box = box;
    this.newX = newX;
    this.newY = newY;
    this.prevStyle = this.box.get(0).style;
  }

  MoveBoxCommand.prototype.execute = function() {
    return this.box.css({
      left: this.newX + 'px',
      top: this.newY + 'px'
    });
  };

  MoveBoxCommand.prototype.undo = function() {
    return this.box.css({
      left: this.prevStyle.left,
      top: this.prevStyle.top
    });
  };

  return MoveBoxCommand;

})(ICommand);

EditorManager = (function() {
  function EditorManager(root) {
    var _this = this;
    this.root = root;
    this.undoStack = [];
    this.redoStack = [];
    this.root.addClass("ppedit-container").on('dragover', function(event) {
      return event.preventDefault();
    }).on('drop', function(event) {
      var boxId, boxNewX, boxNewY;
      event.preventDefault();
      boxId = event.originalEvent.dataTransfer.getData('boxId');
      boxNewX = event.originalEvent.offsetX - event.originalEvent.dataTransfer.getData('mouseOffsetX');
      boxNewY = event.originalEvent.offsetY - event.originalEvent.dataTransfer.getData('mouseOffsetY');
      return _this.moveBox($('#' + boxId), boxNewX, boxNewY);
    });
  }

  EditorManager.prototype.createBox = function(options) {
    return this.pushCommand(new CreateBoxCommand(this.root, options));
  };

  EditorManager.prototype.moveBox = function(box, newX, newY) {
    return this.pushCommand(new MoveBoxCommand(box, newX, newY));
  };

  EditorManager.prototype.pushCommand = function(command) {
    command.execute();
    return this.undoStack.push(command);
  };

  EditorManager.prototype.undo = function() {
    var lastExecutedCommand;
    if (this.undoStack.length > 0) {
      lastExecutedCommand = this.undoStack.pop;
      lastExecutedCommand.undo();
      return this.redoStack.push(lastExecutedCommand);
    }
  };

  EditorManager.prototype.redo = function() {
    if (this.redoStack.length > 0) {
      return this.pushCommand(this.redoStack.pop);
    }
  };

  return EditorManager;

})();

Controller = (function() {
  function Controller(root) {
    var createBoxbutton,
      _this = this;
    this.root = root;
    this.editorManager = new EditorManager(this.root);
    createBoxbutton = $("<button>Create Box</button>");
    this.root.append(createBoxbutton);
    createBoxbutton.click(function() {
      return _this.editorManager.createBox();
    });
  }

  return Controller;

})();

(function($) {
  var root;
  root = null;
  return $.fn.ppedit = function() {
    var controller;
    controller = new Controller(this);
    return this;
  };
})(jQuery);
