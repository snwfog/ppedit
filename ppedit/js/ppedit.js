// Generated by CoffeeScript 1.6.3
(function() {
  var Box, Canvas, Controller, CreateBoxCommand, EditorManager, ICommand, MoveBoxCommand, PCController, RemoveBoxesCommand,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ICommand = (function() {
    function ICommand(root) {
      this.root = root;
    }

    return ICommand;

  })();

  Box = (function() {
    function Box(root, options) {
      var settings,
        _this = this;
      this.root = root;
      this.prevPosition = void 0;
      settings = $.extend({
        left: '50px',
        top: '50px',
        width: '100px',
        height: '200px'
      }, options);
      this.element = $('<div></div>').addClass('ppedit-box').attr('tabindex', 0).attr('id', $.now()).css(settings).mousedown(function(event) {
        _this.element.addClass('ppedit-box-selected');
        return _this.prevPosition = _this.currentPosition();
      }).on('containerMouseMove', function(event, mouseMoveEvent, delta) {
        if (_this.element.hasClass('ppedit-box-selected') && (delta != null)) {
          return _this.move(delta.x, delta.y);
        }
      }).on('containerMouseLeave', function() {
        return _this.stopMoving();
      }).on('containerMouseUp', function() {
        return _this.stopMoving();
      }).on('containerKeyDown', function(event, keyDownEvent) {
        if (_this.element.hasClass('ppedit-box-selected')) {
          return _this.processKeyDownEvent(keyDownEvent);
        }
      }).keydown(function(event) {
        return _this.processKeyDownEvent(event);
      });
    }

    Box.prototype.processKeyDownEvent = function(event) {
      var moved, previousPosition;
      previousPosition = this.currentPosition();
      moved = false;
      if (event.which === 37) {
        event.preventDefault();
        moved = true;
        this.move(-1, 0);
      }
      if (event.which === 38) {
        event.preventDefault();
        moved = true;
        this.move(0, -1);
      }
      if (event.which === 39) {
        event.preventDefault();
        moved = true;
        this.move(1, 0);
      }
      if (event.which === 40) {
        event.preventDefault();
        moved = true;
        this.move(0, 1);
      }
      if (moved) {
        return this.root.trigger('boxMoved', [this, this.currentPosition(), previousPosition]);
      }
    };

    Box.prototype.stopMoving = function() {
      this.element.removeClass('ppedit-box-selected');
      if (this.prevPosition != null) {
        this.root.trigger('boxMoved', [this, this.currentPosition(), $.extend(true, {}, this.prevPosition)]);
      }
      return this.prevPosition = void 0;
    };

    Box.prototype.move = function(deltaX, deltaY) {
      var currentPos;
      currentPos = this.currentPosition();
      return this.setPosition(deltaX + currentPos.x, deltaY + currentPos.y);
    };

    Box.prototype.setPosition = function(x, y) {
      this.element.css('left', x + 'px');
      return this.element.css('top', y + 'px');
    };

    Box.prototype.currentPosition = function() {
      return {
        x: parseInt(this.element.css('left')),
        y: parseInt(this.element.css('top'))
      };
    };

    return Box;

  })();

  RemoveBoxesCommand = (function(_super) {
    __extends(RemoveBoxesCommand, _super);

    function RemoveBoxesCommand(root, boxes) {
      this.root = root;
      this.boxes = boxes;
      RemoveBoxesCommand.__super__.constructor.call(this, this.root);
    }

    RemoveBoxesCommand.prototype.execute = function() {
      return this.boxes.remove();
    };

    RemoveBoxesCommand.prototype.undo = function() {
      return this.root.append(this.boxes);
    };

    return RemoveBoxesCommand;

  })(ICommand);

  CreateBoxCommand = (function(_super) {
    __extends(CreateBoxCommand, _super);

    function CreateBoxCommand(root, options) {
      this.root = root;
      this.options = options;
      CreateBoxCommand.__super__.constructor.call(this, this.root);
      this.box = null;
    }

    CreateBoxCommand.prototype.execute = function() {
      this.box = new Box(this.root, this.options);
      return this.root.append(this.box.element);
    };

    CreateBoxCommand.prototype.undo = function() {
      return this.box.element.remove();
    };

    return CreateBoxCommand;

  })(ICommand);

  MoveBoxCommand = (function(_super) {
    __extends(MoveBoxCommand, _super);

    function MoveBoxCommand(box, toPosition, fromPosition) {
      this.box = box;
      this.toPosition = toPosition;
      this.fromPosition = fromPosition;
      if (fromPosition == null) {
        this.fromPosition = this.box.currentPosition();
      }
    }

    MoveBoxCommand.prototype.execute = function() {
      return this.box.setPosition(this.toPosition.x, this.toPosition.y);
    };

    MoveBoxCommand.prototype.undo = function() {
      console.log(this);
      return this.box.setPosition(this.fromPosition.x, this.fromPosition.y);
    };

    return MoveBoxCommand;

  })(ICommand);

  Canvas = (function() {
    function Canvas(root) {
      this.root = root;
      this.element = void 0;
      this.downPosition = void 0;
      this.rectSize = void 0;
      this.build();
    }

    Canvas.prototype.build = function() {
      var _this = this;
      this.element = $('<canvas></canvas>').addClass('ppedit-canvas').attr('width', '1000px').attr('height', '500px').on('containerMouseDown', function(event, mouseEvent) {
        _this.downPosition = {
          x: mouseEvent.offsetX,
          y: mouseEvent.offsetY
        };
        return _this.rectSize = {
          width: 0,
          height: 0
        };
      }).on('containerMouseMove', function(event, mouseMoveEvent, delta) {
        if ((_this.downPosition != null) && (_this.rectSize != null)) {
          console.log(mouseMoveEvent);
          _this.rectSize.width += delta.x;
          _this.rectSize.height += delta.y;
          return _this.drawRect(_this.downPosition, _this.rectSize);
        }
      }).on('containerMouseLeave', function() {
        return _this.clear();
      }).on('containerMouseUp', function() {
        return _this.clear();
      });
      this.root.append(this.element);
      return this._context = this.element.get(0).getContext('2d');
    };

    Canvas.prototype.drawRect = function(topLeft, size) {
      this._context.clearRect(0, 0, this.element.width(), this.element.height());
      this._context.globalAlpha = 0.2;
      this._context.beginPath();
      this._context.rect(topLeft.x, topLeft.y, size.width, size.height);
      this._context.fillStyle = 'blue';
      return this._context.fill();
    };

    Canvas.prototype.clear = function() {
      this._context.clearRect(0, 0, this.element.width(), this.element.height());
      this.downPosition = void 0;
      return this.rectSize = void 0;
    };

    return Canvas;

  })();

  EditorManager = (function() {
    function EditorManager(root) {
      this.root = root;
      this.undoStack = [];
      this.redoStack = [];
      this.prevMouseEvent = void 0;
      this.canvas = void 0;
      this.build();
    }

    EditorManager.prototype.build = function() {
      var _this = this;
      this.root.addClass("ppedit-container").attr('tabindex', 0).mousedown(function() {
        if ($('.ppedit-box-selected').length === 0) {
          return $('.ppedit-canvas').trigger('containerMouseDown', [event]);
        }
      }).mousemove(function(event) {
        var delta;
        delta = void 0;
        if (_this.prevMouseEvent != null) {
          delta = {
            x: event.clientX - _this.prevMouseEvent.clientX,
            y: event.clientY - _this.prevMouseEvent.clientY
          };
        }
        $('.ppedit-box').trigger('containerMouseMove', [event, delta]);
        $('.ppedit-canvas').trigger('containerMouseMove', [event, delta]);
        return _this.prevMouseEvent = event;
      }).mouseleave(function() {
        $('.ppedit-box').trigger('containerMouseLeave');
        return $('.ppedit-canvas').trigger('containerMouseLeave');
      }).mouseup(function() {
        $('.ppedit-box').trigger('containerMouseUp');
        return $('.ppedit-canvas').trigger('containerMouseUp');
      }).keydown(function(event) {
        return $('.ppedit-box').trigger('containerKeyDown', [event]);
      }).on('boxMoved', function(event, box, currentPosition, originalPosition) {
        return _this.pushCommand(new MoveBoxCommand(box, currentPosition, originalPosition), false);
      });
      return this.canvas = new Canvas(this.root);
    };

    EditorManager.prototype.createBox = function(options) {
      return this.pushCommand(new CreateBoxCommand(this.root, options));
    };

    EditorManager.prototype.removeBox = function(options) {
      return this.pushCommand(new RemoveBoxesCommand(this.root, $('.ppedit-box')));
    };

    EditorManager.prototype.pushCommand = function(command, execute) {
      if ((execute == null) || execute) {
        command.execute();
      }
      return this.undoStack.unshift(command);
    };

    EditorManager.prototype.undo = function() {
      var lastExecutedCommand;
      if (this.undoStack.length > 0) {
        lastExecutedCommand = this.undoStack.shift();
        lastExecutedCommand.undo();
        return this.redoStack.unshift(lastExecutedCommand);
      }
    };

    EditorManager.prototype.redo = function() {
      if (this.redoStack.length > 0) {
        return this.pushCommand(this.redoStack.shift());
      }
    };

    return EditorManager;

  })();

  Controller = (function() {
    function Controller(root) {
      this.root = root;
      this.editorManager = new EditorManager(this.root);
    }

    Controller.prototype.start = function() {
      var createBoxbutton, createRemovebutton,
        _this = this;
      createBoxbutton = $("<button>Create Box</button>");
      createRemovebutton = $("<button>Remove Box</button>");
      this.root.append(createBoxbutton);
      this.root.append(createRemovebutton);
      createBoxbutton.click(function() {
        return _this.editorManager.createBox();
      });
      return createRemovebutton.click(function() {
        return _this.editorManager.removeBox();
      });
    };

    return Controller;

  })();

  PCController = (function(_super) {
    __extends(PCController, _super);

    function PCController(root) {
      this.root = root;
      PCController.__super__.constructor.call(this, this.root);
    }

    PCController.prototype.onCtrlZPressed = function() {
      var _this = this;
      return $(document).bind('keypress', 'Ctrl+z', function(event) {
        return _this.editorManager.undo();
      });
    };

    PCController.prototype.onCtrlYPressed = function() {
      var _this = this;
      return $(document).bind('keypress', 'Ctrl+y', function(event) {
        return _this.editorManager.redo();
      });
    };

    return PCController;

  })(Controller);

  /*
  FooBar jQuery Plugin v1.0 - It makes Foo as easy as coding Bar (?).
  Release: 19/04/2013
  Author: Joe Average <joe@average.me>
  
  http://github.com/joeaverage/foobar
  
  Licensed under the WTFPL license: http://www.wtfpl.net/txt/copying/
  */


  (function($, window, document) {
    var $this, methods, _anotherState, _flag, _internals, _settings;
    $this = void 0;
    _settings = {
      "default": 'cool!'
    };
    _flag = false;
    _anotherState = null;
    methods = {
      init: function(options) {
        var controller;
        $this = $(this);
        $.extend(_settings, options || {});
        controller = new PCController($this);
        controller.onCtrlZPressed();
        controller.start();
        return $this;
      },
      doSomething: function(what) {
        return $this;
      },
      destroy: function() {
        return $this;
      }
    };
    _internals = {
      toggleFlag: function() {
        return _flag = !_flag;
      }
    };
    return $.fn.ppedit = function(method) {
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof method === "object" || !method) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error("Method " + method + " does not exist on jquery.ppedit");
      }
    };
  })(jQuery, window, document);

}).call(this);
