// Generated by CoffeeScript 1.6.3
var Controller, CreateBoxCommand, EditorManager, ICommand, moveBoxCommand, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ICommand = (function() {
  function ICommand(root) {
    this.root = root;
  }

  return ICommand;

})();

CreateBoxCommand = (function(_super) {
  __extends(CreateBoxCommand, _super);

  function CreateBoxCommand(root, options) {
    this.root = root;
    this.options = options;
    CreateBoxCommand.__super__.constructor.call(this, this.root);
    this.box = null;
  }

  CreateBoxCommand.prototype.execute = function() {
    var settings;
    settings = $.extend({
      left: '50px',
      top: '50px',
      width: '100px',
      height: '200px'
    }, this.options);
    this.box = $('<div class="ppedit-box"></div>').css(settings);
    return this.root.append(this.box);
  };

  CreateBoxCommand.prototype.undo = function() {
    return this.root.remove(this.box);
  };

  return CreateBoxCommand;

})(ICommand);

EditorManager = (function() {
  function EditorManager(root) {
    this.root = root;
    this.undoStack = [];
    this.redoStack = [];
  }

  EditorManager.prototype.pushCommand = function(command) {
    command.execute();
    return this.undoStack.push(command);
  };

  EditorManager.prototype.createBox = function(options) {
    return this.pushCommand(new CreateBoxCommand(this.root, options));
  };

  return EditorManager;

})();

({
  moveBox: function() {},
  undoCommand: function() {
    var lastExecutedCommand;
    if (undoStack.length !== 0) {
      lastExecutedCommand = this.undoStack.pop;
      this.redoStack.push(lastExecutedCommand);
      return lastExecutedCommand.undo();
    }
  },
  redoCommand: function() {
    var lastUndoCommand;
    if (this.redoStack.length !== 0) {
      lastUndoCommand = this.redoStack.pop;
      this.undoStack.push(lastUndoCommand);
      return lastUndoCommand.execute();
    }
  }
});

Controller = (function() {
  function Controller(root) {
    var createBoxbutton,
      _this = this;
    this.root = root;
    this.root.addClass("ppedit-container");
    this.editorManager = new EditorManager(this.root);
    createBoxbutton = $("<button>Create Box</button>");
    this.root.append(createBoxbutton);
    createBoxbutton.click(function() {
      return _this.editorManager.createBox();
    });
  }

  return Controller;

})();

(function($) {
  var root;
  root = null;
  return $.fn.ppedit = function() {
    var controller;
    controller = new Controller(this);
    return this;
  };
})(jQuery);

moveBoxCommand = (function(_super) {
  __extends(moveBoxCommand, _super);

  function moveBoxCommand() {
    _ref = moveBoxCommand.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  moveBoxCommand.prevPosition;

  return moveBoxCommand;

})(ICommand);

({
  constructor: function(aBox, aNewPosition) {
    this.box = aBox;
    return this.newPosition = aNewPosition;
  },
  execute: function() {
    this.prevPosition = this.box.getPosition();
    return this.box.setPosition(this.newPosition);
  },
  undo: function() {
    return this.box.setPosition(this.prevPosition);
  }
});
