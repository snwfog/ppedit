// Generated by CoffeeScript 1.6.3
var Controller, CreateBoxCommand, EditorManager, ICommand, moveBoxCommand, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ICommand = (function() {
  function ICommand() {}

  return ICommand;

})();

moveBoxCommand = (function(_super) {
  __extends(moveBoxCommand, _super);

  function moveBoxCommand() {
    _ref = moveBoxCommand.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  moveBoxCommand.prevPosition;

  return moveBoxCommand;

})(ICommand);

({
  constructor: function(aBox, aNewPosition) {
    this.box = aBox;
    return this.newPosition = aNewPosition;
  },
  execute: function() {
    this.prevPosition = this.box.getPosition();
    return this.box.setPosition(this.newPosition);
  },
  undo: function() {
    return this.box.setPosition(this.prevPosition);
  }
});

EditorManager = (function() {
  function EditorManager() {}

  EditorManager.prototype.undoStack = [];

  EditorManager.prototype.redoStack = [];

  EditorManager.prototype.createBox = function() {};

  EditorManager.prototype.moveBox = function() {};

  EditorManager.prototype.pushCommand = function(command) {
    command.execute();
    return unoStack.push(command);
  };

  EditorManager.prototype.undoCommand = function() {
    var lastExecutedCommand;
    if (undoStack.length !== 0) {
      lastExecutedCommand = undoStack.pop;
      redoStack.push(lastExecutedCommand);
      return lastExecutedCommand.undo();
    }
  };

  EditorManager.prototype.redoCommand = function() {
    var lastUndoCommand;
    if (redoStack.length !== 0) {
      lastUndoCommand = redoStack.pop;
      undoStack.push(lastUndoCommand);
      return lastUndoCommand.execute();
    }
  };

  return EditorManager;

})();

Controller = (function() {
  function Controller(root) {
    var createBoxbutton, editorManager;
    this.root = root;
    editorManager = new EditorManager(this.root);
    this.root = this.root.addClass("ppedit-container");
    createBoxbutton = $("<button>Create Box</button>");
    this.root.append(createBoxbutton);
    createBoxbutton.click(function() {
      return editorManager.createBox();
    });
  }

  return Controller;

})();

(function($) {
  var root;
  root = null;
  return $.fn.ppedit = function() {
    var controller;
    controller = new Controller(this);
    return this;
  };
})(jQuery);

CreateBoxCommand = (function(_super) {
  __extends(CreateBoxCommand, _super);

  CreateBoxCommand.prevState;

  function CreateBoxCommand(aBox, aNewState) {
    this.box = aBox;
    this.newState = aNewState;
  }

  CreateBoxCommand.prototype.execute = function() {
    var prevState;
    prevState = this.box.isStateOn();
    return this.box.setState(this.newState);
  };

  CreateBoxCommand.prototype.undo = function() {
    return this.box.setPosition(this.prevState);
  };

  return CreateBoxCommand;

})(ICommand);
