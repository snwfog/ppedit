// Generated by CoffeeScript 1.6.3
/*
Abstract Class, represents an Dom node
*/


(function() {
  var Box, BoxesContainer, Canvas, ChangeStyleCommand, Clipboard, CommandFactory, CommandManager, ControllerFactory, CopyBoxesCommand, CreateBoxesCommand, EditArea, FontPanel, Geometry, Graphic, Grid, KeyCodes, MacController, MoveBoxCommand, PCController, PPEditor, Panel, RemoveBoxesCommand,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Graphic = (function() {
    /*
    Create a new graphic using the passed jQuery selector matching
    the element this dom node will be appended to.
    */

    function Graphic(root) {
      this.root = root;
      this.element = void 0;
    }

    /*
    Creates the element node and append it
    to the passed root
    */


    Graphic.prototype.buildElement = function() {};

    /*
    Method called after the element has been appended
    to the DOM.
    */


    Graphic.prototype.bindEvents = function() {};

    return Graphic;

  })();

  Geometry = (function() {
    function Geometry() {}

    /*
    Returns true if the innerRect Rectangle is fully
    contained within the outerRect Rectangle, false otherwise.
    */


    Geometry.rectContainsRect = function(outerRect, innerRect) {
      return innerRect.topLeft.left >= outerRect.topLeft.left && innerRect.topLeft.top >= outerRect.topLeft.top && innerRect.topLeft.left + innerRect.size.width <= outerRect.topLeft.left + outerRect.size.width && innerRect.topLeft.top + innerRect.size.height <= outerRect.topLeft.top + outerRect.size.height;
    };

    /*
    Returns true if the passed point is contained
     within the passed rectangle, false otherwise.
    */


    Geometry.rectContainsPoint = function(rect, point) {
      return point.left >= rect.topLeft.left && point.top >= rect.topLeft.top && point.left <= rect.topLeft.left + rect.size.width && point.top <= rect.topLeft.top + rect.size.height;
    };

    /*
    Returns true if the passed points have the
    same coordinate, false otherwise.
    */


    Geometry.pointEqualToPoint = function(point1, point2) {
      return point1.left === point2.left && point1.top === point2.top;
    };

    return Geometry;

  })();

  Box = (function(_super) {
    __extends(Box, _super);

    function Box(root, options) {
      this.root = root;
      this.options = options;
      Box.__super__.constructor.call(this, this.root);
      this.prevPosition = void 0;
    }

    Box.prototype.buildElement = function() {
      var settings;
      settings = $.extend({
        left: '50px',
        top: '50px',
        width: '75px',
        height: '50px',
        'font-family': 'Times New Roman',
        'font-size': '100%',
        'font-weight': 'normal',
        'text-decoration': 'none',
        'font-style': 'normal'
      }, this.options);
      return this.element = $('<div></div>').addClass('ppedit-box').attr('tabindex', 0).attr('contenteditable', true).attr('id', $.now()).css(settings);
    };

    Box.prototype.bindEvents = function() {
      var _this = this;
      return this.element.mousedown(function(event) {
        event.stopPropagation();
        return event.preventDefault();
      }).click(function(event) {
        event.stopPropagation();
        event.preventDefault();
        return _this.toggleSelect();
      }).dblclick(function(event) {
        event.stopPropagation();
        event.preventDefault();
        _this.stopMoving();
        return _this.toggleFocus();
      }).on('containerMouseMove', function(event, mouseMoveEvent, delta) {
        if (_this.element.hasClass('ppedit-box-selected') && (delta != null)) {
          return _this.move(delta.x, delta.y);
        }
      }).on('containerMouseLeave', function() {
        return _this.stopMoving();
      }).on('containerKeyDown', function(event, keyDownEvent) {
        if (_this.element.hasClass('ppedit-box-selected')) {
          return _this._processKeyDownEvent(keyDownEvent);
        }
      }).keydown(function(event) {
        if (!_this.isFocused()) {
          return _this._processKeyDownEvent(event);
        }
      });
    };

    /*
    Matches directional arrows event
    to pixel-by-pixel movement
    */


    Box.prototype._processKeyDownEvent = function(event) {
      var moved, previousPosition;
      previousPosition = this.currentPosition();
      moved = false;
      if (event.which === 37) {
        event.preventDefault();
        moved = true;
        this.move(-1, 0);
      }
      if (event.which === 38) {
        event.preventDefault();
        moved = true;
        this.move(0, -1);
      }
      if (event.which === 39) {
        event.preventDefault();
        moved = true;
        this.move(1, 0);
      }
      if (event.which === 40) {
        event.preventDefault();
        moved = true;
        this.move(0, 1);
      }
      if (moved) {
        return this.root.trigger('boxMoved', [this, this.currentPosition(), previousPosition]);
      }
    };

    Box.prototype.stopMoving = function() {
      this.element.removeClass('ppedit-box-selected');
      if ((this.prevPosition != null) && !Geometry.pointEqualToPoint(this.currentPosition(), this.prevPosition)) {
        this.root.trigger('boxMoved', [this, this.currentPosition(), $.extend(true, {}, this.prevPosition)]);
      }
      return this.prevPosition = void 0;
    };

    Box.prototype.move = function(deltaX, deltaY) {
      var currentPos;
      currentPos = this.currentPosition();
      return this.setPosition(deltaX + currentPos.left, deltaY + currentPos.top);
    };

    Box.prototype.setPosition = function(x, y) {
      this.element.css('left', x + 'px');
      return this.element.css('top', y + 'px');
    };

    Box.prototype.currentPosition = function() {
      return this.element.position();
    };

    /*
    Marks the box as selected
    */


    Box.prototype.select = function() {
      this.element.addClass('ppedit-box-selected');
      return this.prevPosition = this.currentPosition();
    };

    /*
    Returns true if the element is currently focused, false otherwise
    */


    Box.prototype.isFocused = function() {
      return this.element.get(0) === document.activeElement;
    };

    Box.prototype.toggleSelect = function() {
      if (this.element.hasClass('ppedit-box-selected')) {
        return this.stopMoving();
      } else {
        this.root.find('.ppedit-box').removeClass('ppedit-box-selected');
        if (!this.isFocused()) {
          return this.select();
        }
      }
    };

    Box.prototype.toggleFocus = function() {
      this.root.find('.ppedit-box').removeClass('ppedit-box-focus').removeClass('ppedit-box-selected');
      return this.element.addClass('ppedit-box-focus').focus();
    };

    Box.prototype.addBulletPoint = function() {
      var el, html, pos, range;
      el = this.element.get(0);
      html = this.element.html();
      pos = el === window.getSelection() ? el.getRangeAt(0).startOffset : html.length;
      this.element.html(html.substr(0, pos) + '<ul><li></li></ul>' + html.substr(pos, html.length));
      this.element.focus();
      if (this.element.setSelectionRange) {
        return this.element.setSelectionRange(pos, pos);
      } else if (this.element.createTextRange) {
        range = this.element.createTextRange();
        range.collapse(true);
        range.moveEnd('character', pos);
        range.moveStart('character', pos);
        return range.select();
      }
    };

    return Box;

  })(Graphic);

  RemoveBoxesCommand = (function() {
    function RemoveBoxesCommand(editor, boxesSelector) {
      var box, boxArray;
      this.editor = editor;
      boxArray = boxesSelector.toArray();
      this.boxIds = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = boxArray.length; _i < _len; _i++) {
          box = boxArray[_i];
          _results.push(box.id);
        }
        return _results;
      })();
      this.boxes = this.editor.area.boxesContainer.getBoxesFromIds(this.boxIds);
    }

    RemoveBoxesCommand.prototype.execute = function() {
      var boxId, _i, _len, _ref, _results;
      this.editor.area.boxesContainer.removeBoxes(this.boxIds);
      _ref = this.boxIds;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        boxId = _ref[_i];
        _results.push(this.editor.panel.removeBoxRow(boxId));
      }
      return _results;
    };

    RemoveBoxesCommand.prototype.undo = function() {
      var box, _i, _len, _ref, _results;
      _ref = this.boxes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        this.editor.area.boxesContainer.addBox(box);
        _results.push(this.editor.panel.addBoxRow(box.element.attr('id')));
      }
      return _results;
    };

    return RemoveBoxesCommand;

  })();

  MoveBoxCommand = (function() {
    function MoveBoxCommand(box, toPosition, fromPosition) {
      this.box = box;
      this.toPosition = toPosition;
      this.fromPosition = fromPosition;
      if (fromPosition == null) {
        this.fromPosition = this.box.currentPosition();
      }
    }

    MoveBoxCommand.prototype.execute = function() {
      return this.box.setPosition(this.toPosition.left, this.toPosition.top);
    };

    MoveBoxCommand.prototype.undo = function() {
      return this.box.setPosition(this.fromPosition.left, this.fromPosition.top);
    };

    return MoveBoxCommand;

  })();

  /*
  A command that creates one or more boxes with the passed options
  ands adds it to the list.
  */


  CreateBoxesCommand = (function() {
    /*
    Creates a command that, when executed, will create
    one or more boxes with a passed array of options, one
    for each box to create and add it to the list of current boxes.
    If no optionsList is passed, only one box is created with the default options.
    */

    function CreateBoxesCommand(editor, optionsList) {
      this.editor = editor;
      this.optionsList = optionsList;
      this.boxes = [];
    }

    CreateBoxesCommand.prototype.execute = function() {
      var box, options, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (this.optionsList != null) {
        if (this.boxes.length === 0) {
          _ref = this.optionsList;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            options = _ref[_i];
            this.boxes.push(new Box(this.editor.area.boxesContainer.element, options));
          }
        }
        _ref1 = this.boxes;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          box = _ref1[_j];
          _results.push(this._addBox(box));
        }
        return _results;
      } else {
        if (this.boxes.length === 0) {
          this.boxes.push(new Box(this.editor.area.boxesContainer.element));
        }
        return this._addBox(this.boxes[0]);
      }
    };

    CreateBoxesCommand.prototype.undo = function() {
      var box, _i, _len, _ref, _results;
      _ref = this.boxes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        this.editor.area.boxesContainer.removeBoxes([box.element.attr('id')]);
        _results.push(this.editor.panel.removeBoxRow([box.element.attr('id')]));
      }
      return _results;
    };

    /*
    Adds the passed box to the boxcontainer and
    create a corresponding row in the panel
    */


    CreateBoxesCommand.prototype._addBox = function(box) {
      this.editor.area.boxesContainer.addBox(box);
      return this.editor.panel.addBoxRow(box.element.attr('id'));
    };

    return CreateBoxesCommand;

  })();

  CopyBoxesCommand = (function() {
    function CopyBoxesCommand(editor, boxesClones) {
      this.editor = editor;
      this.boxesClones = boxesClones;
      this.newBoxes = [];
    }

    CopyBoxesCommand.prototype.execute = function() {
      var box, i, _i, _ref, _results,
        _this = this;
      if (this.newBoxes.length === 0) {
        this.boxesClones.each(function(index, boxItem) {
          var box, boxOptions;
          boxOptions = CSSJSON.toJSON(boxItem.style.cssText).attributes;
          box = new Box(_this.editor.area.boxesContainer.element, boxOptions);
          return _this.newBoxes[index] = box;
        });
      }
      _results = [];
      for (i = _i = 0, _ref = this.newBoxes.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        box = this.newBoxes[i];
        this.editor.area.boxesContainer.addBox(box);
        box.element.html(this.boxesClones.eq(i).html());
        _results.push(this.editor.panel.addBoxRow(box.element.attr('id')));
      }
      return _results;
    };

    CopyBoxesCommand.prototype.undo = function() {
      var box, _i, _len, _ref, _results;
      _ref = this.newBoxes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        this.editor.area.boxesContainer.removeBoxes([box.element.attr('id')]);
        _results.push(this.editor.panel.removeBoxRow([box.element.attr('id')]));
      }
      return _results;
    };

    return CopyBoxesCommand;

  })();

  /*
  Class that manages a set of commands to undo/redo.
  */


  CommandManager = (function() {
    function CommandManager() {
      this.undoStack = [];
      this.redoStack = [];
    }

    /*
    Inserts the passed command into the undo stack
    flow. This method executes the command by default, set
    the execute argument to false in order to prevent that behavior.
    */


    CommandManager.prototype.pushCommand = function(command, execute) {
      if ((execute == null) || execute) {
        command.execute();
      }
      this.undoStack.push(command);
      return this.redoStack.splice(0, this.redoStack.length);
    };

    /*
    Undo the last executed command
    */


    CommandManager.prototype.undo = function() {
      var lastCommand;
      if (this.undoStack.length > 0) {
        lastCommand = this.undoStack.pop();
        lastCommand.undo();
        return this.redoStack.push(lastCommand);
      }
    };

    /*
    Redo the last executed command
    */


    CommandManager.prototype.redo = function() {
      var redoCommand;
      if (this.redoStack.length > 0) {
        redoCommand = this.redoStack.pop();
        redoCommand.execute();
        return this.undoStack.push(redoCommand);
      }
    };

    return CommandManager;

  })();

  ChangeStyleCommand = (function() {
    function ChangeStyleCommand(editor, boxesSelector, newCssOptions) {
      this.editor = editor;
      this.newCssOptions = newCssOptions;
      this.boxesToCopy = boxesSelector.clone();
      this.boxes = this.editor.area.boxesContainer.getBoxesFromSelector(boxesSelector);
    }

    ChangeStyleCommand.prototype.execute = function() {
      var box, id, _ref, _results;
      _ref = this.boxes;
      _results = [];
      for (id in _ref) {
        box = _ref[id];
        _results.push(box.element.css(this.newCssOptions));
      }
      return _results;
    };

    ChangeStyleCommand.prototype.undo = function() {
      var _this = this;
      return this.boxesToCopy.each(function(index, item) {
        var prevCssOptions;
        prevCssOptions = CSSJSON.toJSON(_this.boxesToCopy.filter('#' + item.id).attr('style')).attributes;
        return _this.boxes[item.id].element.css(prevCssOptions);
      });
    };

    return ChangeStyleCommand;

  })();

  CommandFactory = (function() {
    function CommandFactory() {}

    CommandFactory.prototype.createChangeFontSizeCommand = function(editor, boxesSelector, newFontSize) {
      return new ChangeStyleCommand(editor, boxesSelector, {
        'font-size': newFontSize
      });
    };

    CommandFactory.prototype.createChangeFontTypeCommand = function(editor, boxesSelector, newFontType) {
      return new ChangeStyleCommand(editor, boxesSelector, {
        'font-family': newFontType
      });
    };

    CommandFactory.prototype.createChangeFontWeightCommand = function(editor, boxesSelector, enable) {
      var fontWeightValue;
      fontWeightValue = enable ? 'bold' : 'normal';
      return new ChangeStyleCommand(editor, boxesSelector, {
        'font-weight': fontWeightValue
      });
    };

    CommandFactory.prototype.createChangeItalicFontCommand = function(editor, boxesSelector, enable) {
      var styleValue;
      styleValue = enable ? 'italic' : 'normal';
      return new ChangeStyleCommand(editor, boxesSelector, {
        'font-style': styleValue
      });
    };

    CommandFactory.prototype.createChangeUnderlineFontCommand = function(editor, boxesSelector, enable) {
      var styleValue;
      styleValue = enable ? 'underline' : 'none';
      return new ChangeStyleCommand(editor, boxesSelector, {
        'text-decoration': styleValue
      });
    };

    CommandFactory.prototype.createMoveBoxCommand = function(box, toPosition, fromPosition) {
      return new MoveBoxCommand(box, toPosition, fromPosition);
    };

    CommandFactory.prototype.createRemoveBoxesCommand = function(editor, boxesSelector) {
      return new RemoveBoxesCommand(editor, boxesSelector);
    };

    CommandFactory.prototype.createCopyBoxesCommand = function(editor, boxesClones) {
      return new CopyBoxesCommand(editor, boxesClones);
    };

    CommandFactory.prototype.createCreateBoxesCommand = function(editor, optionsList) {
      return new CreateBoxesCommand(editor, optionsList);
    };

    return CommandFactory;

  })();

  /*
  Helper Class that provides static constants to keyboard keycodes.
  */


  KeyCodes = (function() {
    function KeyCodes() {}

    KeyCodes.C = 67;

    KeyCodes.P = 86;

    KeyCodes.Z = 90;

    KeyCodes.Y = 89;

    KeyCodes.DELETE = 46;

    KeyCodes.MAC_CMD_LEFT = 91;

    KeyCodes.MAC_CMD_RIGHT = 93;

    KeyCodes.MAC_DELETE = 8;

    return KeyCodes;

  })();

  PCController = (function() {
    function PCController(root) {
      this.root = root;
    }

    PCController.prototype.bindEvents = function() {
      var _this = this;
      return this.root.keydown(function(event) {
        if (event.keyCode === KeyCodes.Z && event.ctrlKey) {
          event.preventDefault();
          _this.root.trigger('requestUndo');
        }
        if (event.keyCode === KeyCodes.Y && event.ctrlKey) {
          event.preventDefault();
          _this.root.trigger('requestRedo');
        }
        if (event.keyCode === KeyCodes.DELETE || (event.keyCode === KeyCodes.DELETE && event.ctrlKey)) {
          event.preventDefault();
          _this.root.trigger('requestDelete');
        }
        if (event.keyCode === KeyCodes.C && event.ctrlKey) {
          event.preventDefault();
          _this.root.trigger('requestCopy');
        }
        if (event.keyCode === KeyCodes.C && event.ctrlKey) {
          event.preventDefault();
          return _this.root.trigger('requestPaste');
        }
      });
    };

    return PCController;

  })();

  MacController = (function() {
    function MacController(root) {
      this.root = root;
      this.leftCmdKeyPressed = false;
      this.rightCmdKeyPressed = false;
    }

    MacController.prototype.bindEvents = function() {
      var _this = this;
      return this.root.keydown(function(event) {
        if (event.keyCode === KeyCodes.MAC_CMD_LEFT) {
          return _this.leftCmdKeyPressed = true;
        } else if (event.keyCode === KeyCodes.MAC_CMD_RIGHT) {
          return _this.rightCmdKeyPressed = true;
        } else if (event.keyCode === KeyCodes.Z && _this._cmdKeyIsPressed()) {
          event.preventDefault();
          return _this.root.trigger('requestUndo');
        } else if (event.keyCode === KeyCodes.Y && _this._cmdKeyIsPressed()) {
          event.preventDefault();
          return _this.root.trigger('requestRedo');
        } else if (event.keyCode === KeyCodes.MAC_DELETE && _this._cmdKeyIsPressed()) {
          event.preventDefault();
          return _this.root.trigger('requestDelete');
        } else if (event.keyCode === KeyCodes.C && _this._cmdKeyIsPressed()) {
          event.preventDefault();
          return _this.root.trigger('requestCopy');
        } else if (event.keyCode === KeyCodes.P && _this._cmdKeyIsPressed()) {
          event.preventDefault();
          return _this.root.trigger('requestPaste');
        }
      }).keyup(function(event) {
        if (event.keyCode === KeyCodes.MAC_CMD_LEFT) {
          _this.leftCmdKeyPressed = false;
        }
        if (event.keyCode === KeyCodes.MAC_CMD_RIGHT) {
          return _this.rightCmdKeyPressed = false;
        }
      });
    };

    MacController.prototype._cmdKeyIsPressed = function() {
      return this.rightCmdKeyPressed || this.leftCmdKeyPressed;
    };

    return MacController;

  })();

  /*
  the ControllerFactory determines which controller
  to used based on the user's Operating System.
  */


  ControllerFactory = (function() {
    function ControllerFactory() {}

    ControllerFactory.getController = function(root) {
      if (navigator.userAgent.match(/Macintosh/) !== null) {
        return new MacController(root);
      } else {
        return new PCController(root);
      }
    };

    return ControllerFactory;

  })();

  BoxesContainer = (function(_super) {
    __extends(BoxesContainer, _super);

    BoxesContainer.CLICK_TIME_INTERVAL = 200;

    function BoxesContainer(root) {
      this.root = root;
      BoxesContainer.__super__.constructor.call(this, this.root);
      this.boxes = {};
      this.lastDownEvent = void 0;
    }

    BoxesContainer.prototype.buildElement = function() {
      return this.element = $('<div></div>').addClass('ppedit-box-container');
    };

    BoxesContainer.prototype.bindEvents = function() {
      var _this = this;
      return this.element.mousedown(function(event) {
        return _this.lastDownEvent = event;
      }).mouseup(function(event) {
        if ((_this.lastDownEvent != null) && event.timeStamp - _this.lastDownEvent.timeStamp < BoxesContainer.CLICK_TIME_INTERVAL) {
          return _this.unSelectAllBoxes();
        }
      }).dblclick(function(event) {
        var boxCssOptions;
        event.preventDefault();
        boxCssOptions = _this.getPointClicked(event);
        if (_this.getSelectedBoxes().length === 0) {
          return _this.root.trigger('addBoxRequested', [boxCssOptions]);
        }
      });
    };

    /*
    Selects the boxes contained in the passed rect.
    The rect position is relative to the root.
    */


    BoxesContainer.prototype.selectBoxesInRect = function(rect) {
      var selectRect,
        _this = this;
      selectRect = {
        topLeft: {
          left: rect.topLeft.left + this.element.scrollLeft(),
          top: rect.topLeft.top + this.element.scrollTop()
        },
        size: rect.size
      };
      if (selectRect.size.width < 0) {
        selectRect.topLeft.left -= Math.abs(selectRect.size.width);
        selectRect.size.width = Math.abs(selectRect.size.width);
      }
      if (selectRect.size.height < 0) {
        selectRect.topLeft.top -= Math.abs(selectRect.size.height);
        selectRect.size.height = Math.abs(selectRect.size.height);
      }
      return this.getAllBoxes().each(function(index, box) {
        if (Geometry.rectContainsRect(selectRect, _this.boxBounds($(box)))) {
          return _this.boxes[box.id].select();
        }
      });
    };

    /*
    Returns the bounding rectangle of the box matching the
    passed box selector.
    */


    BoxesContainer.prototype.boxBounds = function(boxSelector) {
      var result;
      return result = {
        topLeft: {
          left: boxSelector.position().left + this.element.scrollLeft(),
          top: boxSelector.position().top + this.element.scrollTop()
        },
        size: {
          width: boxSelector.width(),
          height: boxSelector.height()
        }
      };
    };

    /*
    Adds the passed Box Object to the Box List
    */


    BoxesContainer.prototype.addBox = function(box) {
      if (box.element == null) {
        box.buildElement();
      }
      this.element.append(box.element);
      box.bindEvents();
      return this.boxes[box.element.attr('id')] = box;
    };

    /*
    Given an array of box ids, deletes all box objects
    with those ids.
    */


    BoxesContainer.prototype.removeBoxes = function(boxIds) {
      var id, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = boxIds.length; _i < _len; _i++) {
        id = boxIds[_i];
        this.boxes[id].element.removeClass('ppedit-box-selected').removeClass('ppedit-box-focus').remove();
        _results.push(delete this.boxes[id]);
      }
      return _results;
    };

    /*
    Returns an array of Box objects corresponding to the
    passed array of boxIds.
    */


    BoxesContainer.prototype.getBoxesFromIds = function(boxIds) {
      var id;
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = boxIds.length; _i < _len; _i++) {
          id = boxIds[_i];
          if (this.boxes[id] != null) {
            _results.push(this.boxes[id]);
          }
        }
        return _results;
      }).call(this);
    };

    /*
    Returns an list of box objects corresponding to the
    passed selector matching box elements.
    */


    BoxesContainer.prototype.getBoxesFromSelector = function(selector) {
      var box, results, _i, _len, _ref;
      results = {};
      _ref = selector.toArray();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        box = _ref[_i];
        results[box.id] = this.boxes[box.id];
      }
      return results;
    };

    /*
    Returns a selector matching all boxes
    */


    BoxesContainer.prototype.getAllBoxes = function() {
      return this.element.find('.ppedit-box');
    };

    /*
    Returns a selector to the currently selected boxes
    */


    BoxesContainer.prototype.getSelectedBoxes = function() {
      return this.element.find('.ppedit-box:focus, .ppedit-box-selected, .ppedit-box-focus');
    };

    /*
    Returns a selector to the currently selected boxes,
    excluding the focused one, if any.
    */


    BoxesContainer.prototype.getNotFocusedSelectedBoxes = function() {
      return this.element.find('.ppedit-box-selected');
    };

    BoxesContainer.prototype.chageBoxOpacity = function(boxid, opacityVal) {
      return this.boxes[boxid].element.css("opacity", opacityVal);
    };

    BoxesContainer.prototype.unSelectAllBoxes = function() {
      var box, id, _ref, _results;
      _ref = this.boxes;
      _results = [];
      for (id in _ref) {
        box = _ref[id];
        _results.push(box.stopMoving());
      }
      return _results;
    };

    /*
    Returns the position relative to the top left corner
    of the element from the passed mouseEvent.
    */


    BoxesContainer._rectContainsRect = function(outerRect, innerRect) {
      return innerRect.topLeft.x >= outerRect.topLeft.x && innerRect.topLeft.y >= outerRect.topLeft.y && innerRect.topLeft.x + innerRect.size.width <= outerRect.topLeft.x + outerRect.size.width && innerRect.topLeft.y + innerRect.size.height <= outerRect.topLeft.y + outerRect.size.height;
    };

    /*
    Given an array of box ids, change font type of all box objects
    with those ids.
    */


    BoxesContainer.prototype.changeFontType = function(boxIds, newFontType) {
      var id, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = boxIds.length; _i < _len; _i++) {
        id = boxIds[_i];
        _results.push(this.boxes[id].element.css("font-family", newFontType));
      }
      return _results;
    };

    /*
    Given an array of box ids, change font size of all box objects
    with those ids.
    */


    BoxesContainer.prototype.changeFontSize = function(boxIds, newFontSize) {
      var id, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = boxIds.length; _i < _len; _i++) {
        id = boxIds[_i];
        _results.push(this.boxes[id].element.css("font-size", newFontSize));
      }
      return _results;
    };

    /*
    Given a box id and css option object,
    apply the css onto to element of the passed box
    */


    BoxesContainer.prototype.setBoxCss = function(boxId, cssOptions) {
      return this.boxes[boxId].element.css(cssOptions);
    };

    BoxesContainer.prototype.getPointClicked = function(mouseEvent) {
      return {
        left: event.offsetX + this.element.scrollLeft(),
        top: event.offsetY + this.element.scrollTop()
      };
    };

    return BoxesContainer;

  })(Graphic);

  Canvas = (function(_super) {
    __extends(Canvas, _super);

    function Canvas(root) {
      this.root = root;
      Canvas.__super__.constructor.call(this, this.root);
      this.downPosition = void 0;
      this.rectSize = void 0;
      this._context = void 0;
    }

    Canvas.prototype.buildElement = function() {
      return this.element = $('<canvas></canvas>').addClass('ppedit-canvas').attr('width', '600px').attr('height', '960px');
    };

    Canvas.prototype.bindEvents = function() {
      var _this = this;
      this.element.on('containerMouseDown', function(event, mouseEvent) {
        _this.downPosition = {
          left: mouseEvent.offsetX,
          top: mouseEvent.offsetY
        };
        return _this.rectSize = {
          width: 0,
          height: 0
        };
      }).on('containerMouseMove', function(event, mouseMoveEvent, delta) {
        if ((_this.downPosition != null) && (_this.rectSize != null) && (delta != null)) {
          _this.rectSize.width += delta.x;
          _this.rectSize.height += delta.y;
          return _this.drawRect(_this.downPosition, _this.rectSize);
        }
      }).on('containerMouseLeave', function() {
        return _this.clear();
      }).on('containerMouseUp', function() {
        if ((_this.downPosition != null) && (_this.rectSize != null)) {
          _this.root.trigger('canvasRectSelect', [
            {
              topLeft: _this.downPosition,
              size: _this.rectSize
            }
          ]);
        }
        return _this.clear();
      });
      return this._context = this.element.get(0).getContext('2d');
    };

    Canvas.prototype.drawRect = function(topLeft, size) {
      this._context.clearRect(0, 0, this.element.width(), this.element.height());
      this._context.globalAlpha = 0.2;
      this._context.beginPath();
      this._context.rect(topLeft.left, topLeft.top, size.width, size.height);
      this._context.fillStyle = 'blue';
      return this._context.fill();
    };

    Canvas.prototype.clear = function() {
      this._context.clearRect(0, 0, this.element.width(), this.element.height());
      this.downPosition = void 0;
      return this.rectSize = void 0;
    };

    return Canvas;

  })(Graphic);

  Grid = (function(_super) {
    __extends(Grid, _super);

    function Grid(root) {
      this.root = root;
      Grid.__super__.constructor.call(this, this.root);
    }

    Grid.prototype.buildElement = function() {
      return this.element = $('\
       <div class="ppedit-grid">\
            <svg width="100%" height="100%">\
              <defs>\
                <pattern id="smallGrid" width="8" height="8" patternUnits="userSpaceOnUse">\
                  <path d="M 8 0 L 0 0 0 8" fill="none" stroke="gray" stroke-width="0.5"/>\
                </pattern>\
                <pattern id="grid" width="80" height="80" patternUnits="userSpaceOnUse">\
                  <rect width="80" height="80" fill="url(#smallGrid)"/>\
                  <path d="M 80 0 L 0 0 0 80" fill="none" stroke="gray" stroke-width="1"/>\
                </pattern>\
              </defs>\
\
              <rect width="100%" height="100%" fill="url(#grid)" />\
            </svg>\
      </div>');
    };

    Grid.prototype.toggleGrid = function() {
      return this.element.toggle();
    };

    return Grid;

  })(Graphic);

  EditArea = (function(_super) {
    __extends(EditArea, _super);

    function EditArea(root) {
      this.root = root;
      EditArea.__super__.constructor.call(this, this.root);
      this.prevMouseMoveEvent = void 0;
      this.canvas = void 0;
      this.grid = void 0;
      this.boxesContainer = void 0;
    }

    EditArea.prototype.buildElement = function() {
      this.element = $('<div></div>').addClass("ppedit-container").addClass("col-xs-8").attr('tabindex', 0);
      this.boxesContainer = new BoxesContainer(this.element);
      this.canvas = new Canvas(this.element);
      this.grid = new Grid(this.element);
      this.boxesContainer.buildElement();
      this.canvas.buildElement();
      this.grid.buildElement();
      this.element.append(this.boxesContainer.element);
      this.element.append(this.canvas.element);
      return this.element.append(this.grid.element);
    };

    EditArea.prototype.bindEvents = function() {
      var _this = this;
      this.element.mousedown(function() {
        if (_this.boxesContainer.getNotFocusedSelectedBoxes().length === 0) {
          return _this.canvas.element.trigger('containerMouseDown', [event]);
        }
      }).mousemove(function(event) {
        var delta;
        delta = void 0;
        if (_this.prevMouseMoveEvent != null) {
          delta = {
            x: event.clientX - _this.prevMouseMoveEvent.clientX,
            y: event.clientY - _this.prevMouseMoveEvent.clientY
          };
        }
        _this.element.find('*').trigger('containerMouseMove', [event, delta]);
        return _this.prevMouseMoveEvent = event;
      }).mouseleave(function() {
        _this.element.find('*').trigger('containerMouseLeave');
        return _this.prevMouseMoveEvent = void 0;
      }).mouseup(function(event) {
        _this.element.find('*').trigger('containerMouseUp', [event]);
        return _this.prevMouseMoveEvent = void 0;
      }).keydown(function(event) {
        return _this.element.find('*').trigger('containerKeyDown', [event]);
      }).on('canvasRectSelect', function(event, rect) {
        return _this.boxesContainer.selectBoxesInRect(rect);
      });
      this.boxesContainer.bindEvents();
      this.canvas.bindEvents();
      return this.grid.bindEvents();
    };

    return EditArea;

  })(Graphic);

  Panel = (function(_super) {
    __extends(Panel, _super);

    function Panel(root) {
      this.root = root;
      Panel.__super__.constructor.call(this, this.root);
    }

    Panel.prototype.buildElement = function() {
      return this.element = $('\
            <div class="col-xs-5">\
\
               <!-- <button class="btn btn-sm btn-info moveElementUpBtn" type="button"><span class="glyphicon glyphicon-circle-arrow-up"></span></button>\
              <button class="btn btn-sm btn-info moveElementDownBtn" type="button"><span class="glyphicon glyphicon-circle-arrow-down"></span></button> \
                -->\
              <form class="form-inline" role="form" style="padding-top: 5px;">\
                <div class="form-group col-lg-20">\
                  <fieldset style="padding-left: 15px;">\
                    <input class="form-control form-control input-lg" id="focusedInput" type="text" placeholder="Name of document">\
                      <span class="help-block">Example: My Resume</span>\
\
                      <hr>\
\
                      <button class="btn btn-sm btn-primary addElementBtn" type="button"><span class="glyphicon glyphicon-plus-sign"></span> Add Element</button>\
\
                      <button class="btn btn-primary btn-sm gridElementBtn" type="button"><span class="glyphicon glyphicon-th-large"></span> Grid</button>\
\
                      <button class="btn btn-primary btn-sm" type="button"><span class="glyphicon glyphicon-magnet"></span> Snap</button>\
\
                      <button class="btn btn-warning btn-sm clearAllElementBtn" type="button"><span class="glyphicon glyphicon-trash"></span> Clear All</button>\
\
\
              <table class="table table-hover dataPanel">\
                  <thead>\
                      <tr>\
                        <th>Remove</th>\
                        <th>Name of Element</th>\
                        <th>Opacity</th>\
                      </tr>\
                  </thead>\
                  <tbody>\
\
\
\
\
                          </tbody>\
                      </table>\
                    \
                    <button type="submit" class="btn btn btn-success" style="float: right;">Save</button>\
                  </fieldset>\
                </div>\
              </form>\
            </div>');
    };

    Panel.prototype.bindEvents = function() {
      var _this = this;
      $(".addElementBtn").click(function() {
        return _this.root.trigger('panelClickAddBtnClick');
      });
      $(".clearAllElementBtn").click(function() {
        return _this.root.trigger('panelClickClearAllBtnClick');
      });
      return $(".gridElementBtn").click(function() {
        return _this.root.trigger('panelClickGridBtnClick');
      });
    };

    Panel.prototype.moveElementUp = function(panelID) {};

    Panel.prototype.moveElementUpDown = function(panelID) {};

    /*
    Adds a row to be associated with the passed box id.
    */


    Panel.prototype.addBoxRow = function(boxid) {
      var newRow,
        _this = this;
      newRow = $("            <tr>                <td><span class=\"glyphicon glyphicon-remove-sign icon-4x red deleteElementBtn\"></span></td>                <td><input type=\"text\" class=\"input-block-level\" placeholder=\"Enter name\"></input></td>                <td><div class=\"ppedit-slider\"></div></td>            </tr>").attr('ppedit-box-id', boxid);
      this.element.find('.dataPanel tbody').append(newRow);
      newRow.find(".ppedit-slider").slider({
        min: 0,
        max: 100,
        step: 1,
        value: 100
      }).on('slide', function(event) {
        var opacityVal;
        opacityVal = $(event.target).val();
        return _this.root.trigger('onRowSliderValChanged', [boxid, parseInt(opacityVal) / 100]);
      });
      return newRow.find(".deleteElementBtn").on('click', function(event) {
        return _this.root.trigger('onRowDeleteBtnClick', [boxid]);
      });
    };

    /*
    Removes the row associated with the passed box id.
    */


    Panel.prototype.removeBoxRow = function(boxId) {
      return this.element.find("tr[ppedit-box-id=" + boxId + "]").remove();
    };

    return Panel;

  })(Graphic);

  Clipboard = (function() {
    function Clipboard() {
      this.items = void 0;
    }

    Clipboard.prototype.saveItemsStyle = function(newItems) {
      return this.items = newItems.clone();
    };

    return Clipboard;

  })();

  PPEditor = (function(_super) {
    __extends(PPEditor, _super);

    function PPEditor(root) {
      this.root = root;
      PPEditor.__super__.constructor.call(this, this.root);
      this.clipboard = new Clipboard;
      this.commandManager = new CommandManager;
      this.cmdFactory = new CommandFactory;
      this.controller = void 0;
      this.area = void 0;
      this.panel = void 0;
    }

    PPEditor.prototype.buildElement = function() {
      var row;
      this.element = $('\
      <div class="container">\
        <div class="row"></div>\
      </div>\
    ');
      this.controller = ControllerFactory.getController(this.element);
      row = this.element.find('.row');
      this.area = new EditArea(row);
      this.panel = new Panel(row);
      this.fontPanel = new FontPanel(row);
      this.area.buildElement();
      this.panel.buildElement();
      this.fontPanel.buildElement();
      row.append(this.area.element);
      row.append(this.panel.element);
      return row.append(this.fontPanel.element);
    };

    PPEditor.prototype.bindEvents = function() {
      var _this = this;
      this.element.on('requestUndo', function(event) {
        return _this.commandManager.undo();
      }).on('requestRedo', function(event) {
        return _this.commandManager.redo();
      }).on('requestDelete', function(event) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createRemoveBoxesCommand(_this, _this.area.boxesContainer.getSelectedBoxes()));
      }).on('requestCopy', function(event) {
        return _this.clipboard.saveItemsStyle(_this.area.boxesContainer.getSelectedBoxes());
      }).on('requestPaste', function(event) {
        if (_this.clipboard.items.length !== 0) {
          return _this.commandManager.pushCommand(_this.cmdFactory.createCopyBoxesCommand(_this, _this.clipboard.items));
        }
      });
      this.element.find('.row').on('panelClickAddBtnClick', function(event) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createCreateBoxesCommand(_this));
      }).on('panelClickGridBtnClick', function(event) {
        return _this.area.grid.toggleGrid();
      }).on('panelClickClearAllBtnClick', function(event) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createRemoveBoxesCommand(_this, _this.area.boxesContainer.getAllBoxes()));
      }).on('onRowDeleteBtnClick', function(event, boxId) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createRemoveBoxesCommand(_this, _this.root.find('#' + boxId)));
      }).on('onRowSliderValChanged', function(event, boxId, opacityVal) {
        return _this.area.boxesContainer.chageBoxOpacity(boxId, opacityVal);
      }).on('addBoxRequested', function(event, boxCssOptions) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createCreateBoxesCommand(_this, [boxCssOptions]));
      }).on('fontTypeChanged', function(event, newFontType) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontTypeCommand(_this, _this.area.boxesContainer.getSelectedBoxes(), newFontType));
      }).on('fontSizeChanged', function(event, newFontSize) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontSizeCommand(_this, _this.area.boxesContainer.getSelectedBoxes(), newFontSize));
      }).on('fontWeightBtnEnableClick', function(event) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontWeightCommand(_this, _this.area.boxesContainer.getSelectedBoxes(), true));
      }).on('fontWeightBtnDisableClick', function(event) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createChangeFontWeightCommand(_this, _this.area.boxesContainer.getSelectedBoxes(), false));
      }).on('fontUnderlinedBtnEnableClick', function(event) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createChangeUnderlineFontCommand(_this, _this.area.boxesContainer.getSelectedBoxes(), true));
      }).on('fontUnderlinedBtnDisableClick', function(event) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createChangeUnderlineFontCommand(_this, _this.area.boxesContainer.getSelectedBoxes(), false));
      }).on('fontItalicBtnEnableClick', function(event) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createChangeItalicFontCommand(_this, _this.area.boxesContainer.getSelectedBoxes(), true));
      }).on('fontItalicBtnDisableClick', function(event) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createChangeItalicFontCommand(_this, _this.area.boxesContainer.getSelectedBoxes(), false));
      }).on('bulletPointBtnEnableClick', function(event) {
        var box, boxes, id, selectedBoxes, _results;
        selectedBoxes = _this.area.boxesContainer.getSelectedBoxes();
        boxes = _this.area.boxesContainer.getBoxesFromSelector(selectedBoxes.eq(0));
        _results = [];
        for (id in boxes) {
          box = boxes[id];
          _results.push(box.addBulletPoint());
        }
        return _results;
      }).on('bulletPointBtnDisableClick', function(event) {});
      this.area.boxesContainer.element.on('boxMoved', function(event, box, currentPosition, originalPosition) {
        return _this.commandManager.pushCommand(_this.cmdFactory.createMoveBoxCommand(box, currentPosition, originalPosition), false);
      });
      this.area.bindEvents();
      this.panel.bindEvents();
      this.fontPanel.bindEvents();
      return this.controller.bindEvents();
    };

    return PPEditor;

  })(Graphic);

  FontPanel = (function(_super) {
    __extends(FontPanel, _super);

    function FontPanel(root) {
      this.root = root;
      FontPanel.__super__.constructor.call(this, this.root);
    }

    FontPanel.prototype.buildElement = function() {
      return this.element = $('\
            <div class="col-xs-5" style ="padding-left: 30px">\
            <select class="fontTypeBtn">\
                 <option value="Times New Roman" selected>Times New Roman</option>\
                 <option value="Arial">Arial</option>\
                 <option value="Inconsolata">Inconsolata</option>\
                 <option value="Glyphicons Halflings">Glyphicons Halflings</option>\
               </select>\
               \
               <select class="fontSizeBtn">\
                 <option value="6">6</option>\
                 <option value="8">8</option>\
                 <option value="10" selected>10</option>\
                 <option value="11">11</option>\
                 <option value="12">12</option>\
                 <option value="14">14</option>\
                 <option value="16">16</option>\
                 <option value="20">20</option>\
               </select>\
\
               <button class="weightBtn" type="button">B</button>\
               <button class="underlineBtn" type="button">U</button>\
               <button class="italicBtn" type="button">I</button>\
               <button class="bulletPointBtn" type="button">. -</button>\
            </div>');
    };

    FontPanel.prototype.bindEvents = function() {
      var _this = this;
      this.element.find("select.fontTypeBtn").change(function(event) {
        var newFontType;
        newFontType = $(event.target).find("option:selected").val();
        return _this.root.trigger('fontTypeChanged', [newFontType]);
      });
      this.element.find("select.fontSizeBtn").change(function(event) {
        var newFontSize;
        newFontSize = $(event.target).find("option:selected").val() + "pt";
        return _this.root.trigger('fontSizeChanged', [newFontSize]);
      });
      this.element.find(".weightBtn").click(function(event) {
        var btn;
        btn = $(event.target).toggleClass('.ppedit-btn-enabled');
        return _this.root.trigger(btn.hasClass('.ppedit-btn-enabled') ? 'fontWeightBtnEnableClick' : 'fontWeightBtnDisableClick');
      });
      this.element.find(".underlineBtn").click(function(event) {
        var btn;
        btn = $(event.target).toggleClass('.ppedit-btn-enabled');
        return _this.root.trigger(btn.hasClass('.ppedit-btn-enabled') ? 'fontUnderlinedBtnEnableClick' : 'fontUnderlinedBtnDisableClick');
      });
      this.element.find(".italicBtn").click(function(event) {
        var btn;
        btn = $(event.target).toggleClass('.ppedit-btn-enabled');
        return _this.root.trigger(btn.hasClass('.ppedit-btn-enabled') ? 'fontItalicBtnEnableClick' : 'fontItalicBtnDisableClick');
      });
      return this.element.find(".bulletPointBtn").click(function(event) {
        return _this.root.trigger('bulletPointBtnEnableClick');
      });
    };

    return FontPanel;

  })(Graphic);

  /*
  FooBar jQuery Plugin v1.0 - It makes Foo as easy as coding Bar (?).
  Release: 19/04/2013
  Author: Joe Average <joe@average.me>
  
  http://github.com/joeaverage/foobar
  
  Licensed under the WTFPL license: http://www.wtfpl.net/txt/copying/
  */


  (function($, window, document) {
    var $this, methods, _anotherState, _flag, _internals, _settings;
    $this = void 0;
    _settings = {
      "default": 'cool!'
    };
    _flag = false;
    _anotherState = null;
    methods = {
      init: function(options) {
        var editor;
        $this = $(this);
        $.extend(_settings, options || {});
        editor = new PPEditor($this);
        editor.buildElement();
        $this.append(editor.element);
        editor.bindEvents();
        return $this;
      },
      doSomething: function(what) {
        return $this;
      },
      destroy: function() {
        return $this;
      }
    };
    _internals = {
      toggleFlag: function() {
        return _flag = !_flag;
      }
    };
    return $.fn.ppedit = function(method) {
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof method === "object" || !method) {
        return methods.init.apply(this, arguments);
      } else {
        return $.error("Method " + method + " does not exist on jquery.ppedit");
      }
    };
  })(jQuery, window, document);

}).call(this);
